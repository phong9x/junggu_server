/*
 * Created on 6 Jan 2016 ( Time 15:18:56 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.trams.junggu.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "store"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="store", catalog="junggutwo" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="StoreEntity.countAll", query="SELECT COUNT(x) FROM StoreEntity x" )
} )
public class StoreEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="_id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="NAME", length=255)
    private String     name         ;

    @Column(name="TAG", length=255)
    private String     tag          ;

    @Column(name="SERVICE_HOURS", length=255)
    private String     serviceHours ;

    @Column(name="HOLIDAY", length=255)
    private String     holiday      ;

    @Column(name="BUILDING_FORM")
    private String     buildingForm ;

    @Column(name="FLOOR", length=255)
    private String     floor        ;

    @Column(name="FACILITY_LIST")
    private String     facilityList ;

    @Column(name="REPRESENTATIVE", length=255)
    private String     representative ;

    @Column(name="PHONE", length=255)
    private String     phone        ;

    @Column(name="ADDRESS", length=255)
    private String     address      ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="MONITORING_DATE")
    private Date       monitoringDate ;

    @Column(name="MONITORING_MAN", length=255)
    private String     monitoringMan ;

    @Column(name="MONITORING_MAN_PHONE", length=255)
    private String     monitoringManPhone ;

    @Column(name="FIELD_LIST", length=255)
    private String     fieldList    ;

    @Column(name="IMAGE_BASE_ATTACH")
    private String     imageBaseAttach ;

    @Column(name="STORE_NAME", length=300)
    private String     storeName    ;

    @Column(name="STORE_EXIT", length=300)
    private String     storeExit    ;

    @Column(name="STORE_ELEVATOR_POSITON", length=300)
    private String     storeElevatorPositon ;

    @Column(name="DISTANCE")
    private String     distance     ;

    @Column(name="BUILDING_STRUCTURE")
    private String     buildingStructure ;

    @Column(name="PARKING_AREA")
    private String     parkingArea  ;

    @Column(name="ENTRANCE_STATUS")
    private String     entranceStatus ;

    @Column(name="LIVING_FACILITY")
    private String     livingFacility ;

    @Column(name="SPACE")
    private String     space        ;

    @Column(name="PURPOSE_NOTE")
    private String     purposeNote  ;

    @Column(name="ROOM_OF_REFECTOR")
    private String     roomOfRefector ;

    @Column(name="TOILETTE_FOR_DEFECTOR")
    private String     toiletteForDefector ;

    @Column(name="MAIN_GOOD_SERVICE")
    private String     mainGoodService ;

    @Column(name="STAFF_HELP_DEFECTOR")
    private String     staffHelpDefector ;

    @Column(name="IMAGE_EXTEND_ATTACH")
    private String     imageExtendAttach ;

    @Column(name="GRADE", length=500)
    private String     grade        ;

    @Column(name="ACCESSIBILITY_LIST")
    private String     accessibilityList ;

    @Column(name="LONGITUDE", length=100)
    private String     longitude    ;

    @Column(name="LATITUDE", length=100)
    private String     latitude     ;

    @Column(name="IS_DELETE")
    private Integer    isDelete     ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="CREATE_DATE")
    private Date       createDate   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="UPDATE_DATE")
    private Date       updateDate   ;

    @Column(name="CAT_ID")
    private Integer    catId        ;

    @Column(name="USER_ID")
    private Integer    userId       ;

    @Column(name="CATID")
    private Integer    catid        ;

    @Column(name="DESCRIPTION")
    private String     description  ;

    @Column(name="REPORTED")
    private Integer    reported     ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="store", targetEntity=ReportEntity.class)
    private List<ReportEntity> listOfReport;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public StoreEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : NAME ( VARCHAR ) 
    public void setName( String name ) {
        this.name = name;
    }
    public String getName() {
        return this.name;
    }

    //--- DATABASE MAPPING : TAG ( VARCHAR ) 
    public void setTag( String tag ) {
        this.tag = tag;
    }
    public String getTag() {
        return this.tag;
    }

    //--- DATABASE MAPPING : SERVICE_HOURS ( VARCHAR ) 
    public void setServiceHours( String serviceHours ) {
        this.serviceHours = serviceHours;
    }
    public String getServiceHours() {
        return this.serviceHours;
    }

    //--- DATABASE MAPPING : HOLIDAY ( VARCHAR ) 
    public void setHoliday( String holiday ) {
        this.holiday = holiday;
    }
    public String getHoliday() {
        return this.holiday;
    }

    //--- DATABASE MAPPING : BUILDING_FORM ( TEXT ) 
    public void setBuildingForm( String buildingForm ) {
        this.buildingForm = buildingForm;
    }
    public String getBuildingForm() {
        return this.buildingForm;
    }

    //--- DATABASE MAPPING : FLOOR ( VARCHAR ) 
    public void setFloor( String floor ) {
        this.floor = floor;
    }
    public String getFloor() {
        return this.floor;
    }

    //--- DATABASE MAPPING : FACILITY_LIST ( TEXT ) 
    public void setFacilityList( String facilityList ) {
        this.facilityList = facilityList;
    }
    public String getFacilityList() {
        return this.facilityList;
    }

    //--- DATABASE MAPPING : REPRESENTATIVE ( VARCHAR ) 
    public void setRepresentative( String representative ) {
        this.representative = representative;
    }
    public String getRepresentative() {
        return this.representative;
    }

    //--- DATABASE MAPPING : PHONE ( VARCHAR ) 
    public void setPhone( String phone ) {
        this.phone = phone;
    }
    public String getPhone() {
        return this.phone;
    }

    //--- DATABASE MAPPING : ADDRESS ( VARCHAR ) 
    public void setAddress( String address ) {
        this.address = address;
    }
    public String getAddress() {
        return this.address;
    }

    //--- DATABASE MAPPING : MONITORING_DATE ( DATETIME ) 
    public void setMonitoringDate( Date monitoringDate ) {
        this.monitoringDate = monitoringDate;
    }
    public Date getMonitoringDate() {
        return this.monitoringDate;
    }

    //--- DATABASE MAPPING : MONITORING_MAN ( VARCHAR ) 
    public void setMonitoringMan( String monitoringMan ) {
        this.monitoringMan = monitoringMan;
    }
    public String getMonitoringMan() {
        return this.monitoringMan;
    }

    //--- DATABASE MAPPING : MONITORING_MAN_PHONE ( VARCHAR ) 
    public void setMonitoringManPhone( String monitoringManPhone ) {
        this.monitoringManPhone = monitoringManPhone;
    }
    public String getMonitoringManPhone() {
        return this.monitoringManPhone;
    }

    //--- DATABASE MAPPING : FIELD_LIST ( VARCHAR ) 
    public void setFieldList( String fieldList ) {
        this.fieldList = fieldList;
    }
    public String getFieldList() {
        return this.fieldList;
    }

    //--- DATABASE MAPPING : IMAGE_BASE_ATTACH ( TEXT ) 
    public void setImageBaseAttach( String imageBaseAttach ) {
        this.imageBaseAttach = imageBaseAttach;
    }
    public String getImageBaseAttach() {
        return this.imageBaseAttach;
    }

    //--- DATABASE MAPPING : STORE_NAME ( VARCHAR ) 
    public void setStoreName( String storeName ) {
        this.storeName = storeName;
    }
    public String getStoreName() {
        return this.storeName;
    }

    //--- DATABASE MAPPING : STORE_EXIT ( VARCHAR ) 
    public void setStoreExit( String storeExit ) {
        this.storeExit = storeExit;
    }
    public String getStoreExit() {
        return this.storeExit;
    }

    //--- DATABASE MAPPING : STORE_ELEVATOR_POSITON ( VARCHAR ) 
    public void setStoreElevatorPositon( String storeElevatorPositon ) {
        this.storeElevatorPositon = storeElevatorPositon;
    }
    public String getStoreElevatorPositon() {
        return this.storeElevatorPositon;
    }

    //--- DATABASE MAPPING : DISTANCE ( TEXT ) 
    public void setDistance( String distance ) {
        this.distance = distance;
    }
    public String getDistance() {
        return this.distance;
    }

    //--- DATABASE MAPPING : BUILDING_STRUCTURE ( TEXT ) 
    public void setBuildingStructure( String buildingStructure ) {
        this.buildingStructure = buildingStructure;
    }
    public String getBuildingStructure() {
        return this.buildingStructure;
    }

    //--- DATABASE MAPPING : PARKING_AREA ( TEXT ) 
    public void setParkingArea( String parkingArea ) {
        this.parkingArea = parkingArea;
    }
    public String getParkingArea() {
        return this.parkingArea;
    }

    //--- DATABASE MAPPING : ENTRANCE_STATUS ( TEXT ) 
    public void setEntranceStatus( String entranceStatus ) {
        this.entranceStatus = entranceStatus;
    }
    public String getEntranceStatus() {
        return this.entranceStatus;
    }

    //--- DATABASE MAPPING : LIVING_FACILITY ( TEXT ) 
    public void setLivingFacility( String livingFacility ) {
        this.livingFacility = livingFacility;
    }
    public String getLivingFacility() {
        return this.livingFacility;
    }

    //--- DATABASE MAPPING : SPACE ( TEXT ) 
    public void setSpace( String space ) {
        this.space = space;
    }
    public String getSpace() {
        return this.space;
    }

    //--- DATABASE MAPPING : PURPOSE_NOTE ( TEXT ) 
    public void setPurposeNote( String purposeNote ) {
        this.purposeNote = purposeNote;
    }
    public String getPurposeNote() {
        return this.purposeNote;
    }

    //--- DATABASE MAPPING : ROOM_OF_REFECTOR ( TEXT ) 
    public void setRoomOfRefector( String roomOfRefector ) {
        this.roomOfRefector = roomOfRefector;
    }
    public String getRoomOfRefector() {
        return this.roomOfRefector;
    }

    //--- DATABASE MAPPING : TOILETTE_FOR_DEFECTOR ( TEXT ) 
    public void setToiletteForDefector( String toiletteForDefector ) {
        this.toiletteForDefector = toiletteForDefector;
    }
    public String getToiletteForDefector() {
        return this.toiletteForDefector;
    }

    //--- DATABASE MAPPING : MAIN_GOOD_SERVICE ( TEXT ) 
    public void setMainGoodService( String mainGoodService ) {
        this.mainGoodService = mainGoodService;
    }
    public String getMainGoodService() {
        return this.mainGoodService;
    }

    //--- DATABASE MAPPING : STAFF_HELP_DEFECTOR ( TEXT ) 
    public void setStaffHelpDefector( String staffHelpDefector ) {
        this.staffHelpDefector = staffHelpDefector;
    }
    public String getStaffHelpDefector() {
        return this.staffHelpDefector;
    }

    //--- DATABASE MAPPING : IMAGE_EXTEND_ATTACH ( TEXT ) 
    public void setImageExtendAttach( String imageExtendAttach ) {
        this.imageExtendAttach = imageExtendAttach;
    }
    public String getImageExtendAttach() {
        return this.imageExtendAttach;
    }

    //--- DATABASE MAPPING : GRADE ( VARCHAR ) 
    public void setGrade( String grade ) {
        this.grade = grade;
    }
    public String getGrade() {
        return this.grade;
    }

    //--- DATABASE MAPPING : ACCESSIBILITY_LIST ( TEXT ) 
    public void setAccessibilityList( String accessibilityList ) {
        this.accessibilityList = accessibilityList;
    }
    public String getAccessibilityList() {
        return this.accessibilityList;
    }

    //--- DATABASE MAPPING : LONGITUDE ( VARCHAR ) 
    public void setLongitude( String longitude ) {
        this.longitude = longitude;
    }
    public String getLongitude() {
        return this.longitude;
    }

    //--- DATABASE MAPPING : LATITUDE ( VARCHAR ) 
    public void setLatitude( String latitude ) {
        this.latitude = latitude;
    }
    public String getLatitude() {
        return this.latitude;
    }

    //--- DATABASE MAPPING : IS_DELETE ( INT ) 
    public void setIsDelete( Integer isDelete ) {
        this.isDelete = isDelete;
    }
    public Integer getIsDelete() {
        return this.isDelete;
    }

    //--- DATABASE MAPPING : CREATE_DATE ( DATETIME ) 
    public void setCreateDate( Date createDate ) {
        this.createDate = createDate;
    }
    public Date getCreateDate() {
        return this.createDate;
    }

    //--- DATABASE MAPPING : UPDATE_DATE ( DATETIME ) 
    public void setUpdateDate( Date updateDate ) {
        this.updateDate = updateDate;
    }
    public Date getUpdateDate() {
        return this.updateDate;
    }

    //--- DATABASE MAPPING : CAT_ID ( INT ) 
    public void setCatId( Integer catId ) {
        this.catId = catId;
    }
    public Integer getCatId() {
        return this.catId;
    }

    //--- DATABASE MAPPING : USER_ID ( INT ) 
    public void setUserId( Integer userId ) {
        this.userId = userId;
    }
    public Integer getUserId() {
        return this.userId;
    }

    //--- DATABASE MAPPING : CATID ( INT ) 
    public void setCatid( Integer catid ) {
        this.catid = catid;
    }
    public Integer getCatid() {
        return this.catid;
    }

    //--- DATABASE MAPPING : DESCRIPTION ( TEXT ) 
    public void setDescription( String description ) {
        this.description = description;
    }
    public String getDescription() {
        return this.description;
    }

    //--- DATABASE MAPPING : REPORTED ( INT ) 
    public void setReported( Integer reported ) {
        this.reported = reported;
    }
    public Integer getReported() {
        return this.reported;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfReport( List<ReportEntity> listOfReport ) {
        this.listOfReport = listOfReport;
    }
    public List<ReportEntity> getListOfReport() {
        return this.listOfReport;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(name);
        sb.append("|");
        sb.append(tag);
        sb.append("|");
        sb.append(serviceHours);
        sb.append("|");
        sb.append(holiday);
        // attribute 'buildingForm' not usable (type = String Long Text)
        sb.append("|");
        sb.append(floor);
        // attribute 'facilityList' not usable (type = String Long Text)
        sb.append("|");
        sb.append(representative);
        sb.append("|");
        sb.append(phone);
        sb.append("|");
        sb.append(address);
        sb.append("|");
        sb.append(monitoringDate);
        sb.append("|");
        sb.append(monitoringMan);
        sb.append("|");
        sb.append(monitoringManPhone);
        sb.append("|");
        sb.append(fieldList);
        // attribute 'imageBaseAttach' not usable (type = String Long Text)
        sb.append("|");
        sb.append(storeName);
        sb.append("|");
        sb.append(storeExit);
        sb.append("|");
        sb.append(storeElevatorPositon);
        // attribute 'distance' not usable (type = String Long Text)
        // attribute 'buildingStructure' not usable (type = String Long Text)
        // attribute 'parkingArea' not usable (type = String Long Text)
        // attribute 'entranceStatus' not usable (type = String Long Text)
        // attribute 'livingFacility' not usable (type = String Long Text)
        // attribute 'space' not usable (type = String Long Text)
        // attribute 'purposeNote' not usable (type = String Long Text)
        // attribute 'roomOfRefector' not usable (type = String Long Text)
        // attribute 'toiletteForDefector' not usable (type = String Long Text)
        // attribute 'mainGoodService' not usable (type = String Long Text)
        // attribute 'staffHelpDefector' not usable (type = String Long Text)
        // attribute 'imageExtendAttach' not usable (type = String Long Text)
        sb.append("|");
        sb.append(grade);
        // attribute 'accessibilityList' not usable (type = String Long Text)
        sb.append("|");
        sb.append(longitude);
        sb.append("|");
        sb.append(latitude);
        sb.append("|");
        sb.append(isDelete);
        sb.append("|");
        sb.append(createDate);
        sb.append("|");
        sb.append(updateDate);
        sb.append("|");
        sb.append(catId);
        sb.append("|");
        sb.append(userId);
        sb.append("|");
        sb.append(catid);
        // attribute 'description' not usable (type = String Long Text)
        sb.append("|");
        sb.append(reported);
        return sb.toString(); 
    } 

}
