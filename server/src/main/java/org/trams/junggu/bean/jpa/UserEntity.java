/*
 * Created on 21 Dec 2015 ( Time 10:01:05 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.trams.junggu.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "user"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="user", catalog="junggutwo" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="UserEntity.countAll", query="SELECT COUNT(x) FROM UserEntity x" )
} )
public class UserEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="_id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="USERNAME", length=200)
    private String     username     ;

    @Column(name="PASSWORD", nullable=false, length=100)
    private String     password     ;

    @Column(name="NICKNAME", length=200)
    private String     nickname     ;

    @Column(name="FULLNAME", length=255)
    private String     fullname     ;

    @Column(name="ROLE")
    private Integer    role         ;

    @Column(name="SEX", length=50)
    private String     sex          ;

    @Column(name="PHONE", length=200)
    private String     phone        ;

    @Column(name="EMAIL", length=255)
    private String     email        ;

    @Column(name="AGE")
    private Integer    age          ;

    @Column(name="IS_DELETE")
    private Integer    isDelete     ;

    @Column(name="SCRAP")
    private String     scrap        ;

    @Column(name="UUID", length=128)
    private String     uuid         ;

    @Column(name="TOKEN", length=500)
    private String     token        ;

    @Column(name="OS", length=500)
    private String     os           ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="CREATE_DATE")
    private Date       createDate   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="UPDATE_DATE")
    private Date       updateDate   ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public UserEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : USERNAME ( VARCHAR ) 
    public void setUsername( String username ) {
        this.username = username;
    }
    public String getUsername() {
        return this.username;
    }

    //--- DATABASE MAPPING : PASSWORD ( VARCHAR ) 
    public void setPassword( String password ) {
        this.password = password;
    }
    public String getPassword() {
        return this.password;
    }

    //--- DATABASE MAPPING : NICKNAME ( VARCHAR ) 
    public void setNickname( String nickname ) {
        this.nickname = nickname;
    }
    public String getNickname() {
        return this.nickname;
    }

    //--- DATABASE MAPPING : FULLNAME ( VARCHAR ) 
    public void setFullname( String fullname ) {
        this.fullname = fullname;
    }
    public String getFullname() {
        return this.fullname;
    }

    //--- DATABASE MAPPING : ROLE ( INT ) 
    public void setRole( Integer role ) {
        this.role = role;
    }
    public Integer getRole() {
        return this.role;
    }

    //--- DATABASE MAPPING : SEX ( VARCHAR ) 
    public void setSex( String sex ) {
        this.sex = sex;
    }
    public String getSex() {
        return this.sex;
    }

    //--- DATABASE MAPPING : PHONE ( VARCHAR ) 
    public void setPhone( String phone ) {
        this.phone = phone;
    }
    public String getPhone() {
        return this.phone;
    }

    //--- DATABASE MAPPING : EMAIL ( VARCHAR ) 
    public void setEmail( String email ) {
        this.email = email;
    }
    public String getEmail() {
        return this.email;
    }

    //--- DATABASE MAPPING : AGE ( INT ) 
    public void setAge( Integer age ) {
        this.age = age;
    }
    public Integer getAge() {
        return this.age;
    }

    //--- DATABASE MAPPING : IS_DELETE ( INT ) 
    public void setIsDelete( Integer isDelete ) {
        this.isDelete = isDelete;
    }
    public Integer getIsDelete() {
        return this.isDelete;
    }

    //--- DATABASE MAPPING : SCRAP ( TEXT ) 
    public void setScrap( String scrap ) {
        this.scrap = scrap;
    }
    public String getScrap() {
        return this.scrap;
    }

    //--- DATABASE MAPPING : UUID ( VARCHAR ) 
    public void setUuid( String uuid ) {
        this.uuid = uuid;
    }
    public String getUuid() {
        return this.uuid;
    }

    //--- DATABASE MAPPING : TOKEN ( VARCHAR ) 
    public void setToken( String token ) {
        this.token = token;
    }
    public String getToken() {
        return this.token;
    }

    //--- DATABASE MAPPING : OS ( VARCHAR ) 
    public void setOs( String os ) {
        this.os = os;
    }
    public String getOs() {
        return this.os;
    }

    //--- DATABASE MAPPING : CREATE_DATE ( DATETIME ) 
    public void setCreateDate( Date createDate ) {
        this.createDate = createDate;
    }
    public Date getCreateDate() {
        return this.createDate;
    }

    //--- DATABASE MAPPING : UPDATE_DATE ( DATETIME ) 
    public void setUpdateDate( Date updateDate ) {
        this.updateDate = updateDate;
    }
    public Date getUpdateDate() {
        return this.updateDate;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(username);
        sb.append("|");
        sb.append(password);
        sb.append("|");
        sb.append(nickname);
        sb.append("|");
        sb.append(fullname);
        sb.append("|");
        sb.append(role);
        sb.append("|");
        sb.append(sex);
        sb.append("|");
        sb.append(phone);
        sb.append("|");
        sb.append(email);
        sb.append("|");
        sb.append(age);
        sb.append("|");
        sb.append(isDelete);
        // attribute 'scrap' not usable (type = String Long Text)
        sb.append("|");
        sb.append(uuid);
        sb.append("|");
        sb.append(token);
        sb.append("|");
        sb.append(os);
        sb.append("|");
        sb.append(createDate);
        sb.append("|");
        sb.append(updateDate);
        return sb.toString(); 
    } 

}
