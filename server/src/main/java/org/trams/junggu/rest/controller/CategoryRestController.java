/*
 * Created on 29 Oct 2015 ( Time 14:20:17 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.junggu.rest.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.junggu.bean.Category;
import org.trams.junggu.bean.jpa.CategoryEntity;
import org.trams.junggu.business.service.CategoryService;
import org.trams.junggu.rest.common.Message;
import org.trams.junggu.rest.common.ReturnValue;
import org.trams.junggu.rest.item.ReturnObjectData;
import org.trams.junggu.web.item.response.DistrictItem;

/**
 * Spring MVC controller for 'Category' management.
 */
@Controller
public class CategoryRestController {

	@Resource
	private CategoryService categoryService;

//	@RequestMapping(value = "/items/category", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
//	@ResponseStatus(HttpStatus.OK)
//	@ResponseBody
//	public List<CategoryListItem> findAllAsListItems() {
//		List<Category> list = categoryService.findAll();
//		List<CategoryListItem> items = new LinkedList<CategoryListItem>();
//		for (Category category : list) {
//			items.add(new CategoryListItem(category));
//		}
//		return items;
//	}
	
	@RequestMapping( value="/api/dictrict/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnObjectData<Object> getDistrictList(@PathVariable("id") Integer id) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", null);
		
		List<DistrictItem> listDistrict = new ArrayList<>();
		
		try {
			List<CategoryEntity> list = categoryService.findByGroupId(id);
			
			for ( CategoryEntity country : list ) {
				DistrictItem districtItem = new DistrictItem(country.getId(),country.getParentId(),country.getCatNameAdmin());
				listDistrict.add(districtItem);
			}
			
			data = new ReturnObjectData<Object>(0, "", listDistrict);
			
		} catch (Exception e) {
			data = new ReturnObjectData<Object>(1, "error", null);
		}
		
		return data;
	}

	@RequestMapping(value = "/items/category", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnValue findAllAsListItems(@RequestBody String json) {
		ReturnValue rv = new ReturnValue();
		try {
			
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Long updateDate = org.trams.junggu.web.common.Utils.parseLong(jsonObj.get("updateDate"));
			
			Date dateUpdate = new Date(updateDate);

			List<Category> list = categoryService.findAllUpdate(dateUpdate);
			if (list.size() > 0) {
				rv.ReturningObject(list);
			} else {
				rv.ReturningString(Message.LIST_UPDATE_FAIL, Message.LIST_UPDATE_ZERO_CODE);
			}
		} catch (Exception e) {
			rv.ReturningException();
		}
		return rv;
	}
//
//	@RequestMapping(value = "/category", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
//	@ResponseStatus(HttpStatus.OK)
//	@ResponseBody
//	public List<Category> findAll() {
//		return categoryService.findAll();
//	}
//
//	@RequestMapping(value = "/category/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
//	@ResponseStatus(HttpStatus.OK)
//	@ResponseBody
//	public Category findOne(@PathVariable("id") Integer id) {
//		return categoryService.findById(id);
//	}
//
//	@RequestMapping(value = "/category", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
//	@ResponseStatus(HttpStatus.OK)
//	@ResponseBody
//	public ReturnValue create(@RequestBody Category category) {
//		Category result = new Category();
//		ReturnValue rv = new ReturnValue();
//		CategoryEntity checkCategoryName = categoryService.checkCategoryName(category.getCatName());
//		try{
//			if(checkCategoryName!=null){
//				 rv.ReturningString(Message.DUPLICATE_ERROR, Message.DUPLICATE_ERROR_CODE);
//			}else {
//				category.setCreateDate(new Date());
//				category.setUpdateDate(new Date());
//				result = categoryService.create(category);
//				rv.ReturningValue(result, Message.CREATE_CATEGORY_SUCCESS, Message.SUCCESS_CODE);
//			}
//		}catch(Exception e){
//			rv.ReturningException();
//			
//		}
//		return rv;
//	}
//
//	@RequestMapping(value = "/category/{id}", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
//	@ResponseStatus(HttpStatus.OK)
//	@ResponseBody
//	public Category update(@PathVariable("id") Integer id, @RequestBody Category category) {
//		return categoryService.update(category);
//	}
//
//	@RequestMapping(value = "/category/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
//	@ResponseStatus(HttpStatus.OK)
//	@ResponseBody
//	public void delete(@PathVariable("id") Integer id) {
//		categoryService.delete(id);
//	}

}
