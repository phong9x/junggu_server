/*
 * Created on 29 Oct 2015 ( Time 14:20:20 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.junggu.rest.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.hibernate.loader.custom.Return;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.junggu.bean.Accessibility;
import org.trams.junggu.bean.Store;
import org.trams.junggu.bean.User;
import org.trams.junggu.bean.jpa.UserEntity;
import org.trams.junggu.business.service.UserService;
import org.trams.junggu.business.service.mapping.UserServiceMapper;
import org.trams.junggu.rest.common.ReturnValue;
import org.trams.junggu.rest.item.UserItem;
import org.trams.junggu.rest.common.Message;
import org.trams.junggu.web.common.Utils;
import org.trams.junggu.web.listitem.UserListItem;

/**
 * Spring MVC controller for 'User' management.
 */
@Controller
public class UserRestController {

	@Resource
	private UserService userService;
	@Resource
	private UserServiceMapper userServiceMapper;
	
	@RequestMapping( value="/items/user",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnValue findAllAsListItems(@RequestBody String json) {
		ReturnValue rv =  new ReturnValue();
		try {
			
		JSONParser parser = new JSONParser();
		JSONObject jsonObj = (JSONObject) parser.parse(json);
		Long updateDate = org.trams.junggu.web.common.Utils.parseLong(jsonObj.get("updateDate"));			
			
			
		Date dateUpdate = new Date(updateDate);
		
		List<User> list = userService.findAllUpdate(dateUpdate);
		if(list.size()>0)
		rv.ReturningObject(list);
		else
			rv.ReturningString(Message.LIST_UPDATE_FAIL, Message.LIST_UPDATE_ZERO_CODE);
		return rv;
		} catch(Exception e)
		{
			rv.ReturningException();
			return rv;
		}
		
	}
	
	@RequestMapping( value="/user/registor",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnValue create(@RequestBody User user) {
		User result = new User();
		ReturnValue rv =  new ReturnValue();
		UserEntity checkUsername = userService.findByUserName(user.getUsername());
		user.setRole(0);
		user.setIsDelete(0);
		user.setUpdateDate(new Date());
		user.setCreateDate(new Date());
	    user.setPassword(Utils.getMD5(user.getPassword()));
	    user.setScrap(Utils.convertStringListToJson(null));
	    user.setOs(user.getOs());
	    user.setUuid(user.getUuid());
	    user.setToken(user.getToken());
	    try{
			    if(checkUsername != null)
			    {
			    	rv.ReturningString(Message.DUPLICATE_ERROR, Message.DUPLICATE_ERROR_CODE);
		    		return rv;
			    }
			    else
			    	result = userService.create(user);
			  
	    		if(result != null)
					rv.ReturningValue(result,Message.CREATE_USER_SUCCESS,Message.SUCCESS_CODE);
				
	    		return rv;
			
	    	} catch (Exception e)
			{
	    		rv.ReturningException();
				return rv;
			}
	}
	
	@RequestMapping( value="/user/login",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnValue login(@RequestBody User user,HttpSession session) {
		User result = new User();
		ReturnValue rv =  new ReturnValue();
		try{
			result = userServiceMapper.mapUserEntityToUser(userService.login(user.getUsername(), Utils.getMD5(user.getPassword()), user.getRole()));
			if(result!=null){
				UserItem userItem = new UserItem();
				userItem.parserBean(result);
				userItem.setSessionId("JSESSIONID="+session.getId());
				session.setAttribute("login", userItem);
				try {
				User user_save = userService.findById(userItem.getId());
				
				user_save.setOs(user.getOs());
				user_save.setUuid(user.getUuid());
				user_save.setToken(user.getToken());
				user_save.setUpdateDate(new Date());
				userService.update(user_save); 
				} catch(Exception e)
				{
					
				}
				
				
				rv.ReturningValue(userItem,"로그인 되었습니다.",200);
			} else{
				rv.ReturningString(Message.LOGIN_ERROR, Message.LOGIN_ERROR_CODE);
			}
			return rv;	
		} catch (Exception e)
		{
			rv.ReturningException();
			return rv;
		}
	}
	@RequestMapping( value="/user/get_new_session",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnValue loginAgain(@RequestBody User user,HttpSession session) {
		User result = new User();
		ReturnValue rv =  new ReturnValue();
		try{
			result = userServiceMapper.mapUserEntityToUser(userService.login(user.getUsername(), user.getPassword(), user.getRole()));
			if(result!=null){
				UserItem userItem = new UserItem();
				userItem.parserBean(result);
				userItem.setSessionId("JSESSIONID="+session.getId());
				session.setAttribute("login", userItem);
				
				rv.ReturningObject(userItem);
			} else{
				rv.ReturningString(Message.LOGIN_ERROR, Message.LOGIN_ERROR_CODE);
			}
			return rv;	
		} catch (Exception e)
		{
			rv.ReturningException();
			return rv;
		}
	}


}
