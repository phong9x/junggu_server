/*
 * Created on 29 Oct 2015 ( Time 14:22:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.junggu.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.junggu.bean.User;
import org.trams.junggu.bean.jpa.UserEntity;
import java.util.Date;
import org.trams.junggu.business.service.UserService;
import org.trams.junggu.business.service.mapping.UserServiceMapper;
import org.trams.junggu.data.repository.jpa.UserJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of UserService
 */
@Component
@Transactional
public class UserServiceImpl implements UserService {

	@Resource
	private UserJpaRepository userJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private UserServiceMapper userServiceMapper;
	
	@Override
	public User findById(Integer id) {
		UserEntity userEntity = userJpaRepository.findOne(id);
		return userServiceMapper.mapUserEntityToUser(userEntity);
	}

	@Override
	public Page<UserEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userJpaRepository.findAll(request);
	}

	@Override
	public List<User> findAll() {
		Iterable<UserEntity> entities = userJpaRepository.findAll();
		List<User> beans = new ArrayList<User>();
		for(UserEntity userEntity : entities) {
			beans.add(userServiceMapper.mapUserEntityToUser(userEntity));
		}
		return beans;
	}
	
	@Override
	public List<User> findAllUpdate(Date updateDate) {
		PageRequest request = new PageRequest(0, 5000, new Sort(new Order(Direction.ASC, "updateDate")));
		Iterable<UserEntity> entities = userJpaRepository.findAllUpdate(updateDate,request);
		List<User> beans = new ArrayList<User>();
		for(UserEntity userEntity : entities) {
			beans.add(userServiceMapper.mapUserEntityToUser(userEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userJpaRepository.count();
		return count;
	}

	@Override
	public User save(User user) {
		return update(user) ;
	}

	@Override
	public User create(User user) {
/*
		UserEntity userEntity = userJpaRepository.findOne(user.getId());
		if( userEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userEntity = new UserEntity();
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
*/
		UserEntity userEntity = new UserEntity();
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	@Override
	public User update(User user) {
		UserEntity userEntity = userJpaRepository.findOne(user.getId());
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userJpaRepository.delete(id);
	}

	public UserJpaRepository getUserJpaRepository() {
		return userJpaRepository;
	}

	public void setUserJpaRepository(UserJpaRepository userJpaRepository) {
		this.userJpaRepository = userJpaRepository;
	}

	public UserServiceMapper getUserServiceMapper() {
		return userServiceMapper;
	}

	public void setUserServiceMapper(UserServiceMapper userServiceMapper) {
		this.userServiceMapper = userServiceMapper;
	}

	@Override
	public UserEntity login(String username, String password, Integer role) {
		try{
			return userJpaRepository.login(username, password, role);
		}catch(Exception e){
			return null;
		}
		
	}
	
	@Override
	public UserEntity findByUserName(String username) {
		try{
			return userJpaRepository.findByUsername(username);
		}catch(Exception e){
			return null;
		}
		
	}

	@Override
	public Page<UserEntity> findAllById(String id,Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.findAllById(id, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<UserEntity> findAllByMobileNumber(String phone,Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.findAllByMobileNumber(phone, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<UserEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
