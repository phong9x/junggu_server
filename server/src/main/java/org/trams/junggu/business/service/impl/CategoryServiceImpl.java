/*
 * Created on 29 Oct 2015 ( Time 14:22:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.junggu.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.junggu.bean.Category;
import org.trams.junggu.bean.jpa.CategoryEntity;
import java.util.Date;
import org.trams.junggu.business.service.CategoryService;
import org.trams.junggu.business.service.mapping.CategoryServiceMapper;
import org.trams.junggu.data.repository.jpa.CategoryJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CategoryService
 */
@Component
@Transactional
public class CategoryServiceImpl implements CategoryService {

	@Resource
	private CategoryJpaRepository categoryJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CategoryServiceMapper categoryServiceMapper;
	
	@Override
	public Category findById(Integer id) {
		CategoryEntity categoryEntity = categoryJpaRepository.findOne(id);
		return categoryServiceMapper.mapCategoryEntityToCategory(categoryEntity);
	}

	@Override
	public Page<CategoryEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return categoryJpaRepository.findAll(request);
	}

	@Override
	public List<Category> findAll() {
		Iterable<CategoryEntity> entities = categoryJpaRepository.findAll();
		List<Category> beans = new ArrayList<Category>();
		for(CategoryEntity categoryEntity : entities) {
			beans.add(categoryServiceMapper.mapCategoryEntityToCategory(categoryEntity));
		}
		return beans;
	}
	
	@Override
	public CategoryEntity checkCategoryName(String name)
	{
		try {
			return categoryJpaRepository.checkCategoryName(name);
		} catch (Exception e) {
			return null;
		}
	}
	
	@Override
	public List<Category> findAllUpdate(Date updateDate) {
		PageRequest request = new PageRequest(0, 5000,new Sort(new Order(Direction.ASC, "updateDate")));
		Iterable<CategoryEntity> entities = categoryJpaRepository.findAllUpdate(updateDate,request);
		List<Category> beans = new ArrayList<Category>();
		for(CategoryEntity categoryEntity : entities) {
			beans.add(categoryServiceMapper.mapCategoryEntityToCategory(categoryEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = categoryJpaRepository.count();
		return count;
	}

	@Override
	public Category save(Category category) {
		return update(category) ;
	}

	@Override
	public Category create(Category category) {
/*
		CategoryEntity categoryEntity = categoryJpaRepository.findOne(category.getId());
		if( categoryEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		categoryEntity = new CategoryEntity();
		categoryServiceMapper.mapCategoryToCategoryEntity(category, categoryEntity);
		CategoryEntity categoryEntitySaved = categoryJpaRepository.save(categoryEntity);
		return categoryServiceMapper.mapCategoryEntityToCategory(categoryEntitySaved);
*/
		CategoryEntity categoryEntity = new CategoryEntity();
		categoryServiceMapper.mapCategoryToCategoryEntity(category, categoryEntity);
		CategoryEntity categoryEntitySaved = categoryJpaRepository.save(categoryEntity);
		return categoryServiceMapper.mapCategoryEntityToCategory(categoryEntitySaved);
	}

	@Override
	public Category update(Category category) {
		CategoryEntity categoryEntity = categoryJpaRepository.findOne(category.getId());
		categoryServiceMapper.mapCategoryToCategoryEntity(category, categoryEntity);
		CategoryEntity categoryEntitySaved = categoryJpaRepository.save(categoryEntity);
		return categoryServiceMapper.mapCategoryEntityToCategory(categoryEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		categoryJpaRepository.delete(id);
	}

	public CategoryJpaRepository getCategoryJpaRepository() {
		return categoryJpaRepository;
	}

	public void setCategoryJpaRepository(CategoryJpaRepository categoryJpaRepository) {
		this.categoryJpaRepository = categoryJpaRepository;
	}

	public CategoryServiceMapper getCategoryServiceMapper() {
		return categoryServiceMapper;
	}

	public void setCategoryServiceMapper(CategoryServiceMapper categoryServiceMapper) {
		this.categoryServiceMapper = categoryServiceMapper;
	}

	@Override
	public List<CategoryEntity> findByGroupId(Integer parentId) {
		try {
			return categoryJpaRepository.findByGroupId(parentId);
		} catch (Exception exception) {
			return null;
		}
	}

	@Override
	public List<CategoryEntity> findByDistrict(){
		try {
			PageRequest request = new PageRequest(0, 499,new Sort(new Order(Direction.ASC, "catName")));
			return categoryJpaRepository.findByDistrictId(request);
		} catch (Exception exception) {
			return null;
		}
	}

	@Override
	public Page<CategoryEntity> listPaging(String key,Integer page, Integer size) {
		try {
			PageRequest request = new PageRequest(page-1, size,new Sort(new Order(Direction.DESC, "id")));
			return categoryJpaRepository.listPaging(key,request);
		} catch (Exception exception) {
			return null;
		}
	}

}
