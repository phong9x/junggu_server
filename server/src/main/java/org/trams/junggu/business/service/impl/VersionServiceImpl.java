/*
 * Created on 29 Oct 2015 ( Time 14:22:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.junggu.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.junggu.bean.Version;
import org.trams.junggu.bean.jpa.VersionEntity;
import java.util.Date;
import org.trams.junggu.business.service.VersionService;
import org.trams.junggu.business.service.mapping.VersionServiceMapper;
import org.trams.junggu.data.repository.jpa.VersionJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of VersionService
 */
@Component
@Transactional
public class VersionServiceImpl implements VersionService {

	@Resource
	private VersionJpaRepository versionJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private VersionServiceMapper versionServiceMapper;
	
	@Override
	public Version findById(Integer id) {
		VersionEntity versionEntity = versionJpaRepository.findOne(id);
		return versionServiceMapper.mapVersionEntityToVersion(versionEntity);
	}

	@Override
	public Page<VersionEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return versionJpaRepository.findAll(request);
	}

	@Override
	public List<Version> findAll() {
		Iterable<VersionEntity> entities = versionJpaRepository.findAll();
		List<Version> beans = new ArrayList<Version>();
		for(VersionEntity versionEntity : entities) {
			beans.add(versionServiceMapper.mapVersionEntityToVersion(versionEntity));
		}
		return beans;
	}
	@Override
	public List<Version> findAllUpdate(Date updateDate) {
		PageRequest request = new PageRequest(0, 5000, new Sort(new Order(Direction.ASC, "updateDate")));
		Iterable<VersionEntity> entities = versionJpaRepository.findAllUpdate(updateDate,request);
		List<Version> beans = new ArrayList<Version>();
		for(VersionEntity versionEntity : entities) {
			beans.add(versionServiceMapper.mapVersionEntityToVersion(versionEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = versionJpaRepository.count();
		return count;
	}

	@Override
	public Version save(Version version) {
		return update(version) ;
	}

	@Override
	public Version create(Version version) {
/*
		VersionEntity versionEntity = versionJpaRepository.findOne(version.getId());
		if( versionEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		versionEntity = new VersionEntity();
		versionServiceMapper.mapVersionToVersionEntity(version, versionEntity);
		VersionEntity versionEntitySaved = versionJpaRepository.save(versionEntity);
		return versionServiceMapper.mapVersionEntityToVersion(versionEntitySaved);
*/
		VersionEntity versionEntity = new VersionEntity();
		versionServiceMapper.mapVersionToVersionEntity(version, versionEntity);
		VersionEntity versionEntitySaved = versionJpaRepository.save(versionEntity);
		return versionServiceMapper.mapVersionEntityToVersion(versionEntitySaved);
	}

	@Override
	public Version update(Version version) {
		VersionEntity versionEntity = versionJpaRepository.findOne(version.getId());
		versionServiceMapper.mapVersionToVersionEntity(version, versionEntity);
		VersionEntity versionEntitySaved = versionJpaRepository.save(versionEntity);
		return versionServiceMapper.mapVersionEntityToVersion(versionEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		versionJpaRepository.delete(id);
	}

	public VersionJpaRepository getVersionJpaRepository() {
		return versionJpaRepository;
	}

	public void setVersionJpaRepository(VersionJpaRepository versionJpaRepository) {
		this.versionJpaRepository = versionJpaRepository;
	}

	public VersionServiceMapper getVersionServiceMapper() {
		return versionServiceMapper;
	}

	public void setVersionServiceMapper(VersionServiceMapper versionServiceMapper) {
		this.versionServiceMapper = versionServiceMapper;
	}

}
