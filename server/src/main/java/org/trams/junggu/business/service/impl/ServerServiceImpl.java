/*
 * Created on 22 Feb 2016 ( Time 14:37:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.junggu.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.junggu.bean.Server;
import org.trams.junggu.bean.Store;
import org.trams.junggu.bean.jpa.ServerEntity;
import org.trams.junggu.bean.jpa.StoreEntity;

import java.util.Date;
import org.trams.junggu.business.service.ServerService;
import org.trams.junggu.business.service.mapping.ServerServiceMapper;
import org.trams.junggu.data.repository.jpa.ServerJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ServerService
 */
@Component
@Transactional
public class ServerServiceImpl implements ServerService {

	@Resource
	private ServerJpaRepository serverJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private ServerServiceMapper serverServiceMapper;
	
	@Override
	public Server findById(Integer id) {
		ServerEntity serverEntity = serverJpaRepository.findOne(id);
		return serverServiceMapper.mapServerEntityToServer(serverEntity);
	}

	@Override
	public Page<ServerEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return serverJpaRepository.findAll(request);
	}

	@Override
	public List<Server> findAll() {
		Iterable<ServerEntity> entities = serverJpaRepository.findAll();
		List<Server> beans = new ArrayList<Server>();
		for(ServerEntity serverEntity : entities) {
			beans.add(serverServiceMapper.mapServerEntityToServer(serverEntity));
		}
		return beans;
	}

	
	@Override
	public List<Server> findAllUpdate(Date updateDate) {
		PageRequest request = new PageRequest(0, 5000, new Sort(new Order(Direction.ASC, "updateDate")));
		Iterable<ServerEntity> entities = serverJpaRepository.findAllUpdate(updateDate,request);
		List<Server> beans = new ArrayList<Server>();
		for(ServerEntity userEntity : entities) {
			//if(userEntity.getIsDelete() != 1){
				beans.add(serverServiceMapper.mapServerEntityToServer(userEntity));
		//	}
		}
		return beans;
	}
	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = serverJpaRepository.count();
		return count;
	}

	@Override
	public Server save(Server server) {
		return update(server) ;
	}

	@Override
	public Server create(Server server) {
/*
		ServerEntity serverEntity = serverJpaRepository.findOne(server.getId());
		if( serverEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		serverEntity = new ServerEntity();
		serverServiceMapper.mapServerToServerEntity(server, serverEntity);
		ServerEntity serverEntitySaved = serverJpaRepository.save(serverEntity);
		return serverServiceMapper.mapServerEntityToServer(serverEntitySaved);
*/
		ServerEntity serverEntity = new ServerEntity();
		serverServiceMapper.mapServerToServerEntity(server, serverEntity);
		ServerEntity serverEntitySaved = serverJpaRepository.save(serverEntity);
		return serverServiceMapper.mapServerEntityToServer(serverEntitySaved);
	}

	@Override
	public Server update(Server server) {
		ServerEntity serverEntity = serverJpaRepository.findOne(server.getId());
		serverServiceMapper.mapServerToServerEntity(server, serverEntity);
		ServerEntity serverEntitySaved = serverJpaRepository.save(serverEntity);
		return serverServiceMapper.mapServerEntityToServer(serverEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		serverJpaRepository.delete(id);
	}

	public ServerJpaRepository getServerJpaRepository() {
		return serverJpaRepository;
	}

	public void setServerJpaRepository(ServerJpaRepository serverJpaRepository) {
		this.serverJpaRepository = serverJpaRepository;
	}

	public ServerServiceMapper getServerServiceMapper() {
		return serverServiceMapper;
	}

	public void setServerServiceMapper(ServerServiceMapper serverServiceMapper) {
		this.serverServiceMapper = serverServiceMapper;
	}

}
