/*
 * Created on 29 Oct 2015 ( Time 14:22:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.junggu.business.service.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.annotation.Resource;

import org.trams.junggu.bean.Store;
import org.trams.junggu.bean.User;
import org.trams.junggu.bean.jpa.StoreEntity;
import org.trams.junggu.bean.jpa.UserEntity;

import java.util.Date;
import org.trams.junggu.business.service.StoreService;
import org.trams.junggu.business.service.mapping.StoreServiceMapper;
import org.trams.junggu.data.repository.jpa.StoreJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of StoreService
 */
@Component
@Transactional
public class StoreServiceImpl implements StoreService {

	@Resource
	private StoreJpaRepository storeJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private StoreServiceMapper storeServiceMapper;
	
	@Override
	public Store findById(Integer id) {
		StoreEntity storeEntity = storeJpaRepository.findOne(id);
		return storeServiceMapper.mapStoreEntityToStore(storeEntity);
	}

	@Override
	public List<Store> findAll() {
		Iterable<StoreEntity> entities = storeJpaRepository.findAll();
		List<Store> beans = new ArrayList<Store>();
		for(StoreEntity storeEntity : entities) {
			beans.add(storeServiceMapper.mapStoreEntityToStore(storeEntity));
		}
		return beans;
	}
	
	@Override
	public List<Store> findAllUpdate(Date updateDate) {
		PageRequest request = new PageRequest(0, 5000, new Sort(new Order(Direction.ASC, "updateDate")));
		Iterable<StoreEntity> entities = storeJpaRepository.findAllUpdate(updateDate,request);
		List<Store> beans = new ArrayList<Store>();
		for(StoreEntity userEntity : entities) {
			//if(userEntity.getIsDelete() != 1){
				beans.add(storeServiceMapper.mapStoreEntityToStore(userEntity));
		//	}
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = storeJpaRepository.count();
		return count;
	}

	@Override
	public Store save(Store store) {
		return update(store) ;
	}

	@Override
	public Store create(Store store) {
/*
		StoreEntity storeEntity = storeJpaRepository.findOne(store.getId());
		if( storeEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		storeEntity = new StoreEntity();
		storeServiceMapper.mapStoreToStoreEntity(store, storeEntity);
		StoreEntity storeEntitySaved = storeJpaRepository.save(storeEntity);
		return storeServiceMapper.mapStoreEntityToStore(storeEntitySaved);
*/
		StoreEntity storeEntity = new StoreEntity();
		storeServiceMapper.mapStoreToStoreEntity(store, storeEntity);
		StoreEntity storeEntitySaved = storeJpaRepository.save(storeEntity);
		return storeServiceMapper.mapStoreEntityToStore(storeEntitySaved);
	}

	@Override
	public Store update(Store store) {
		StoreEntity storeEntity = storeJpaRepository.findOne(store.getId());
		storeServiceMapper.mapStoreToStoreEntity(store, storeEntity);
		StoreEntity storeEntitySaved = storeJpaRepository.save(storeEntity);
		return storeServiceMapper.mapStoreEntityToStore(storeEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		storeJpaRepository.delete(id);
	}

	public StoreJpaRepository getStoreJpaRepository() {
		return storeJpaRepository;
	}

	public void setStoreJpaRepository(StoreJpaRepository storeJpaRepository) {
		this.storeJpaRepository = storeJpaRepository;
	}

	public StoreServiceMapper getStoreServiceMapper() {
		return storeServiceMapper;
	}

	public void setStoreServiceMapper(StoreServiceMapper storeServiceMapper) {
		this.storeServiceMapper = storeServiceMapper;
	}

	@Override
	public Page<StoreEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return storeJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<StoreEntity> findALlByCompanyName(String name, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return storeJpaRepository.findALlByCompanyName(name, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	
	@Override
	public Page<StoreEntity> findALlByAdress(String address, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return storeJpaRepository.findALlByAdress(address, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<StoreEntity> findALlByRepresentative(String representative, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "id")));
			return storeJpaRepository.findALlByRepresentative(representative, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<StoreEntity> findALlByMainPhone(String phone, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "id")));
			return storeJpaRepository.findALlByMainPhone(phone, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<StoreEntity> findALlByCategory(String catid, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "id")));
			return storeJpaRepository.findALlByCategory(catid, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}



	@Override
	public List<Store> findAll(Integer page) {
		
			return null;
		
	}

	@Override
	public String getNameStore(Integer id) {
		try {
			
			return storeJpaRepository.getNameStore(id);
		} catch (Exception e) {
			System.out.println(e);
			return "";
		}
	}

}
