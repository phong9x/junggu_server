/*
 * Created on 29 Oct 2015 ( Time 14:22:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.junggu.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.junggu.bean.Facility;
import org.trams.junggu.bean.jpa.FacilityEntity;
import java.util.Date;
import org.trams.junggu.business.service.FacilityService;
import org.trams.junggu.business.service.mapping.FacilityServiceMapper;
import org.trams.junggu.data.repository.jpa.FacilityJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of FacilityService
 */
@Component
@Transactional
public class FacilityServiceImpl implements FacilityService {

	@Resource
	private FacilityJpaRepository facilityJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private FacilityServiceMapper facilityServiceMapper;
	
	@Override
	public Facility findById(Integer id) {
		FacilityEntity facilityEntity = facilityJpaRepository.findOne(id);
		return facilityServiceMapper.mapFacilityEntityToFacility(facilityEntity);
	}

	@Override
	public Page<FacilityEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return facilityJpaRepository.findAll(request);
	}

	@Override
	public List<Facility> findAll() {
		Iterable<FacilityEntity> entities = facilityJpaRepository.findAll();
		List<Facility> beans = new ArrayList<Facility>();
		for(FacilityEntity facilityEntity : entities) {
			beans.add(facilityServiceMapper.mapFacilityEntityToFacility(facilityEntity));
		}
		return beans;
	}
	@Override
	public List<Facility> findAllUpdate(Date updateDate) {
		PageRequest request = new PageRequest(0, 5000, new Sort(new Order(Direction.ASC, "updateDate")));
		Iterable<FacilityEntity> entities = facilityJpaRepository.findAllUpdate(updateDate,request);
		List<Facility> beans = new ArrayList<Facility>();
		for(FacilityEntity facilityEntity : entities) {
			beans.add(facilityServiceMapper.mapFacilityEntityToFacility(facilityEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = facilityJpaRepository.count();
		return count;
	}

	@Override
	public Facility save(Facility facility) {
		return update(facility) ;
	}

	@Override
	public Facility create(Facility facility) {
/*
		FacilityEntity facilityEntity = facilityJpaRepository.findOne(facility.getId());
		if( facilityEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		facilityEntity = new FacilityEntity();
		facilityServiceMapper.mapFacilityToFacilityEntity(facility, facilityEntity);
		FacilityEntity facilityEntitySaved = facilityJpaRepository.save(facilityEntity);
		return facilityServiceMapper.mapFacilityEntityToFacility(facilityEntitySaved);
*/
		FacilityEntity facilityEntity = new FacilityEntity();
		facilityServiceMapper.mapFacilityToFacilityEntity(facility, facilityEntity);
		FacilityEntity facilityEntitySaved = facilityJpaRepository.save(facilityEntity);
		return facilityServiceMapper.mapFacilityEntityToFacility(facilityEntitySaved);
	}

	@Override
	public Facility update(Facility facility) {
		FacilityEntity facilityEntity = facilityJpaRepository.findOne(facility.getId());
		facilityServiceMapper.mapFacilityToFacilityEntity(facility, facilityEntity);
		FacilityEntity facilityEntitySaved = facilityJpaRepository.save(facilityEntity);
		return facilityServiceMapper.mapFacilityEntityToFacility(facilityEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		facilityJpaRepository.delete(id);
	}

	public FacilityJpaRepository getFacilityJpaRepository() {
		return facilityJpaRepository;
	}

	public void setFacilityJpaRepository(FacilityJpaRepository facilityJpaRepository) {
		this.facilityJpaRepository = facilityJpaRepository;
	}

	public FacilityServiceMapper getFacilityServiceMapper() {
		return facilityServiceMapper;
	}

	public void setFacilityServiceMapper(FacilityServiceMapper facilityServiceMapper) {
		this.facilityServiceMapper = facilityServiceMapper;
	}

	@Override
	public Page<FacilityEntity> listPaging(String key, Integer page, Integer size) {
		try {
			PageRequest request = new PageRequest(page-1, size, new Sort(new Order(Direction.ASC, "id")));
			return facilityJpaRepository.listPaging(key, request);
		} catch (Exception e) {
			return null;
		}
	}

}
