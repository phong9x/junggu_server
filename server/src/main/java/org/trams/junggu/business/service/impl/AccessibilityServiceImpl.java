/*
 * Created on 29 Oct 2015 ( Time 14:22:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.junggu.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.junggu.bean.Accessibility;
import org.trams.junggu.bean.jpa.AccessibilityEntity;
import java.util.Date;
import org.trams.junggu.business.service.AccessibilityService;
import org.trams.junggu.business.service.mapping.AccessibilityServiceMapper;
import org.trams.junggu.data.repository.jpa.AccessibilityJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of AccessibilityService
 */
@Component
@Transactional
public class AccessibilityServiceImpl implements AccessibilityService {

	@Resource
	private AccessibilityJpaRepository accessibilityJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private AccessibilityServiceMapper accessibilityServiceMapper;
	
	@Override
	public Accessibility findById(Integer id) {
		AccessibilityEntity accessibilityEntity = accessibilityJpaRepository.findOne(id);
		return accessibilityServiceMapper.mapAccessibilityEntityToAccessibility(accessibilityEntity);
	}
	
	@Override
	public AccessibilityEntity finByAccessibilityName(String name) {
		try{
			return accessibilityJpaRepository.finByAccessibilityName(name);
		}catch(Exception e){
		return null;	
		}
	}


	@Override
	public Page<AccessibilityEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return accessibilityJpaRepository.findAll(request);
	}

	@Override
	public List<Accessibility> findAll() {
		Iterable<AccessibilityEntity> entities = accessibilityJpaRepository.findAll();
		List<Accessibility> beans = new ArrayList<Accessibility>();
		for(AccessibilityEntity accessibilityEntity : entities) {
			beans.add(accessibilityServiceMapper.mapAccessibilityEntityToAccessibility(accessibilityEntity));
		}
		return beans;
	}
	@Override
	public List<Accessibility> findAllUpdate(Date updateDate) {
		PageRequest request = new PageRequest(0, 5000,new Sort(new Order(Direction.ASC, "updateDate")));
		Iterable<AccessibilityEntity> entities = accessibilityJpaRepository.findAllUpdate(updateDate, request);
		List<Accessibility> beans = new ArrayList<Accessibility>();
		for(AccessibilityEntity accessibilityEntity : entities) {
			beans.add(accessibilityServiceMapper.mapAccessibilityEntityToAccessibility(accessibilityEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = accessibilityJpaRepository.count();
		return count;
	}

	@Override
	public Accessibility save(Accessibility accessibility) {
		return update(accessibility) ;
	}

	@Override
	public Accessibility create(Accessibility accessibility) {
/*
		AccessibilityEntity accessibilityEntity = accessibilityJpaRepository.findOne(accessibility.getId());
		if( accessibilityEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		accessibilityEntity = new AccessibilityEntity();
		accessibilityServiceMapper.mapAccessibilityToAccessibilityEntity(accessibility, accessibilityEntity);
		AccessibilityEntity accessibilityEntitySaved = accessibilityJpaRepository.save(accessibilityEntity);
		return accessibilityServiceMapper.mapAccessibilityEntityToAccessibility(accessibilityEntitySaved);
*/
		AccessibilityEntity accessibilityEntity = new AccessibilityEntity();
		accessibilityServiceMapper.mapAccessibilityToAccessibilityEntity(accessibility, accessibilityEntity);
		AccessibilityEntity accessibilityEntitySaved = accessibilityJpaRepository.save(accessibilityEntity);
		return accessibilityServiceMapper.mapAccessibilityEntityToAccessibility(accessibilityEntitySaved);
	}

	@Override
	public Accessibility update(Accessibility accessibility) {
		AccessibilityEntity accessibilityEntity = accessibilityJpaRepository.findOne(accessibility.getId());
		accessibilityServiceMapper.mapAccessibilityToAccessibilityEntity(accessibility, accessibilityEntity);
		AccessibilityEntity accessibilityEntitySaved = accessibilityJpaRepository.save(accessibilityEntity);
		return accessibilityServiceMapper.mapAccessibilityEntityToAccessibility(accessibilityEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		accessibilityJpaRepository.delete(id);
	}

	public AccessibilityJpaRepository getAccessibilityJpaRepository() {
		return accessibilityJpaRepository;
	}

	public void setAccessibilityJpaRepository(AccessibilityJpaRepository accessibilityJpaRepository) {
		this.accessibilityJpaRepository = accessibilityJpaRepository;
	}

	public AccessibilityServiceMapper getAccessibilityServiceMapper() {
		return accessibilityServiceMapper;
	}

	public void setAccessibilityServiceMapper(AccessibilityServiceMapper accessibilityServiceMapper) {
		this.accessibilityServiceMapper = accessibilityServiceMapper;
	}

}
