/*
 * Created on 29 Oct 2015 ( Time 14:22:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.junggu.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.junggu.bean.Field;
import org.trams.junggu.bean.jpa.FieldEntity;
import java.util.Date;
import org.trams.junggu.business.service.FieldService;
import org.trams.junggu.business.service.mapping.FieldServiceMapper;
import org.trams.junggu.data.repository.jpa.FieldJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of FieldService
 */
@Component
@Transactional
public class FieldServiceImpl implements FieldService {

	@Resource
	private FieldJpaRepository fieldJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private FieldServiceMapper fieldServiceMapper;
	
	@Override
	public Field findById(Integer id) {
		FieldEntity fieldEntity = fieldJpaRepository.findOne(id);
		return fieldServiceMapper.mapFieldEntityToField(fieldEntity);
	}

	@Override
	public Page<FieldEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return fieldJpaRepository.findAll(request);
	}

	@Override
	public List<Field> findAll() {
		Iterable<FieldEntity> entities = fieldJpaRepository.findAll();
		List<Field> beans = new ArrayList<Field>();
		for(FieldEntity fieldEntity : entities) {
			beans.add(fieldServiceMapper.mapFieldEntityToField(fieldEntity));
		}
		return beans;
	}
	
	@Override
	public List<Field> findAllUpdate(Date updateDate) {
		PageRequest request = new PageRequest(0, 5000, new Sort(new Order(Direction.ASC, "updateDate")));
		Iterable<FieldEntity> entities = fieldJpaRepository.findAllUpdate(updateDate,request);
		List<Field> beans = new ArrayList<Field>();
		for(FieldEntity fieldEntity : entities) {
			beans.add(fieldServiceMapper.mapFieldEntityToField(fieldEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = fieldJpaRepository.count();
		return count;
	}

	@Override
	public Field save(Field field) {
		return update(field) ;
	}

	@Override
	public Field create(Field field) {
/*
		FieldEntity fieldEntity = fieldJpaRepository.findOne(field.getId());
		if( fieldEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		fieldEntity = new FieldEntity();
		fieldServiceMapper.mapFieldToFieldEntity(field, fieldEntity);
		FieldEntity fieldEntitySaved = fieldJpaRepository.save(fieldEntity);
		return fieldServiceMapper.mapFieldEntityToField(fieldEntitySaved);
*/
		FieldEntity fieldEntity = new FieldEntity();
		fieldServiceMapper.mapFieldToFieldEntity(field, fieldEntity);
		FieldEntity fieldEntitySaved = fieldJpaRepository.save(fieldEntity);
		return fieldServiceMapper.mapFieldEntityToField(fieldEntitySaved);
	}

	@Override
	public Field update(Field field) {
		FieldEntity fieldEntity = fieldJpaRepository.findOne(field.getId());
		fieldServiceMapper.mapFieldToFieldEntity(field, fieldEntity);
		FieldEntity fieldEntitySaved = fieldJpaRepository.save(fieldEntity);
		return fieldServiceMapper.mapFieldEntityToField(fieldEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		fieldJpaRepository.delete(id);
	}

	public FieldJpaRepository getFieldJpaRepository() {
		return fieldJpaRepository;
	}

	public void setFieldJpaRepository(FieldJpaRepository fieldJpaRepository) {
		this.fieldJpaRepository = fieldJpaRepository;
	}

	public FieldServiceMapper getFieldServiceMapper() {
		return fieldServiceMapper;
	}

	public void setFieldServiceMapper(FieldServiceMapper fieldServiceMapper) {
		this.fieldServiceMapper = fieldServiceMapper;
	}

	@Override
	public List<FieldEntity> listField( ) {
		try {
			PageRequest request = new PageRequest(0, 499, new Sort(new Order(Direction.ASC, "updateDate")));
			return fieldJpaRepository.listField(request);
		} catch (Exception e) {
			return null;
		}
	}

	@Override
	public Page<FieldEntity> listPaging(String key, Integer page, Integer size) {
		try {
			PageRequest request = new PageRequest(page-1, size, new Sort(new Order(Direction.ASC, "id")));
			return fieldJpaRepository.listPaging(key, request);
		} catch (Exception e) {
			return null;
		}
	}

}
