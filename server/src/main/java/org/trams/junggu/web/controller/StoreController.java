/*
 * Created on 29 Oct 2015 ( Time 14:20:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.junggu.web.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.trams.junggu.bean.Accessibility;
import org.trams.junggu.bean.Category;
import org.trams.junggu.bean.Comment;
import org.trams.junggu.bean.Facility;
import org.trams.junggu.bean.Field;
//--- Entities
import org.trams.junggu.bean.Store;
import org.trams.junggu.bean.jpa.CategoryEntity;
import org.trams.junggu.bean.jpa.CommentEntity;
import org.trams.junggu.bean.jpa.FieldEntity;
import org.trams.junggu.bean.jpa.StoreEntity;
import org.trams.junggu.business.service.AccessibilityService;
import org.trams.junggu.business.service.CategoryService;
import org.trams.junggu.business.service.CommentService;
import org.trams.junggu.business.service.FacilityService;
import org.trams.junggu.business.service.FieldService;
//--- Services 
import org.trams.junggu.business.service.StoreService;
import org.trams.junggu.business.service.mapping.StoreServiceMapper;
import org.trams.junggu.rest.item.UserItem;
//--- Common classes
import org.trams.junggu.web.common.AbstractController;
import org.trams.junggu.web.common.FileUtils;
import org.trams.junggu.web.common.Login;
import org.trams.junggu.web.common.Pager;
import org.trams.junggu.web.common.Utils;
import org.trams.junggu.web.item.FacilityDataItem;
import org.trams.junggu.web.item.response.BuildingStructureItem;
import org.trams.junggu.web.item.response.DistanceItem;
import org.trams.junggu.web.item.response.EntranceStatusItem;
import org.trams.junggu.web.item.response.ImageExtend;
import org.trams.junggu.web.item.response.LivingFacilityItem;
import org.trams.junggu.web.item.response.MainGoodService;
import org.trams.junggu.web.item.response.ParkingAreaItem;
import org.trams.junggu.web.item.response.PurposeNoteItem;
import org.trams.junggu.web.item.response.RoomOfRefectorItem;
import org.trams.junggu.web.item.response.SpaceItem;
import org.trams.junggu.web.item.response.StaffToHelp;
import org.trams.junggu.web.item.response.ToiletteForDefector;


/**
 * Spring MVC controller for 'Store' management.
 */
@Controller
@RequestMapping("/store")
public class StoreController extends AbstractController {
	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "store";
	private static final Integer PAGE_SIZE   = 10;

	private static String nav = "store";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "store/create";
	private static final String JSP_LIST   = "store/list";
	private static final String JSP_DETAIL   = "store/detail";
	private static final String JSP_LOGIN   = "redirect:/login";

	//--- Main entity service
	@Resource
    private StoreService storeService; // Injected by Spring
	@Resource
    private CategoryService categoryService; // Injected by Spring
	//--- Other service(s)
	@Resource
    private FacilityService facilityService;
	@Resource
    private AccessibilityService accessibilityService;
	@Resource
    private CommentService commentService;
	@Resource
	private FieldService fieldService;
	@Autowired 
	ServletContext servletContext;
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	@Resource
	private StoreServiceMapper storeServiceMapper;
	
	public StoreController() {
		super(StoreController.class, MAIN_ENTITY_NAME );
		log("StoreController created.");
	}

	@RequestMapping("/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="com") String type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="search",defaultValue="0") Integer search,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			Model model,HttpSession session) {
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		
		//List<Facility> listFacility = facilityService.findAll();
		
		Page<StoreEntity> listPage=null;
		String strKey="";
		if(delete>0){
			try {
				Store store=storeService.findById(delete);
				store.setIsDelete(1);
				store.setUpdateDate(new Date());
				storeService.update(store);
			} catch (Exception e) {
				
			}
		}
		if(search>0 && key!="" && key!=null){
			strKey=key;
			if (type.equalsIgnoreCase("com")) {
				listPage=storeService.findALlByCompanyName(key, page, PAGE_SIZE);
			}else if (type.equalsIgnoreCase("cat")) {
				listPage=storeService.findALlByCategory(key, page, PAGE_SIZE);
			}else if (type.equalsIgnoreCase("add")) {
				listPage=storeService.findALlByAdress(key, page, PAGE_SIZE);
			}else if (type.equalsIgnoreCase("rep")) {
				listPage=storeService.findALlByRepresentative(key, page, PAGE_SIZE);
			}else if (type.equalsIgnoreCase("phone")) {
				listPage=storeService.findALlByMainPhone(key, page, PAGE_SIZE);
			}else{
				listPage=storeService.listPaging(page, PAGE_SIZE);
			}
		}else{
			listPage=storeService.listPaging(page, PAGE_SIZE);
		}
		String area="";
		for (StoreEntity storeEntity : listPage) {
			String str= Utils.ConvertJsonTo_String(storeEntity.getFieldList(), "field_list","field_list_name");
			String addressA= Utils.ConvertJsonTo_String(storeEntity.getAddress(), "address","address1");
			
			if(storeEntity.getCatid()>0){
				 area = categoryService.findById(storeEntity.getCatid()).getCatName();
			}
			String addressB= Utils.ConvertJsonTo_String(storeEntity.getAddress(), "address","address2");
			String address = "서울시 중구 " + area+" "+ addressB + "<br>서울시 중구 " + addressA;
			storeEntity.setAddress(address);
			storeEntity.setFieldList(str);
			
//			Store store = storeServiceMapper.mapStoreEntityToStore(storeEntity);
//			org.trams.junggu.rest.sqlite.bean.Store storeItem = new org.trams.junggu.rest.sqlite.bean.Store();
//			storeItem.setOtherInfo(Utils.getOtherInfomation(store));
//			storeItem.parserBean(store);
//			System.out.println("================"+storeItem.getOtherInfo());
//			storeEntity.setPhone(Utils.formatPhoneNumber(storeEntity.getPhone()));
		}
		model.addAttribute("key", strKey);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/store/list");
		new Pager<StoreEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");	
		return JSP_LIST;
	}

	@RequestMapping(value="/create",method=RequestMethod.GET)
	public String create(HttpSession session, Model model) {
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		List<Facility> listFacility = facilityService.findAll();
		List<Accessibility> listAccessibility = accessibilityService.findAll();
		List<CategoryEntity> listCategory = categoryService.findByGroupId(0);
		List<FieldEntity> listField = fieldService.listField();
		
		model.addAttribute("listField", listField);
		model.addAttribute("listCategory", listCategory);
		model.addAttribute("listAccessibility", listAccessibility);
		model.addAttribute("listFacility", listFacility);
		model.addAttribute("activePage", nav);
		return JSP_CREATE;
	}
	@RequestMapping(value="/create",method=RequestMethod.POST)
	public String postCreate(
			@RequestParam(value="name_of_company",defaultValue="") String name,
			@RequestParam(value="tag",defaultValue="") String tag,
			@RequestParam(value="service_hours",defaultValue="") String serviceHours,
			@RequestParam(value="holiday",defaultValue="") String holiday,
			@RequestParam(value="building_form",defaultValue="") String[] buildingForm,
			@RequestParam(value="floor",defaultValue="") String floor,
			@RequestParam(value="facility",defaultValue="") String[] facilityList,
			@RequestParam(value="representative",defaultValue="") String representative,
			@RequestParam(value="phone",defaultValue="") String phone,
			@RequestParam(value="category",defaultValue="") String cate,
			@RequestParam(value="address1",defaultValue="") String address1,
			@RequestParam(value="address2",defaultValue="") String address2,
			@RequestParam(value="monitoring_date",defaultValue="") String monitoring_date,
			@RequestParam(value="monitoring_man",defaultValue="") String[] monitoring_man,
			@RequestParam(value="monitoring_man_phone",defaultValue="") String[] monitoring_man_phone,
			@RequestParam(value="image_base_attach") MultipartFile[] image_base_attach,
			@RequestParam(value="description",defaultValue="") String description,
			@RequestParam(value="store_name",defaultValue="") String store_name,
			@RequestParam(value="store_exit",defaultValue="") String store_exit,
			@RequestParam(value="store_elevator_positon",defaultValue="") String store_elevator_positon,
			@RequestParam(value="distance",defaultValue="") String[] distance,
			@RequestParam(value="building_structure",defaultValue="") String[] building_structure,
			@RequestParam(value="parking_main",defaultValue="") String[] parking_main,
			@RequestParam(value="parking_distance",defaultValue="") String[] parking_distance,
			@RequestParam(value="parking_lot_area",defaultValue="") String[] parking_lot_area,
			@RequestParam(value="parking_lot_defector",defaultValue="") String[] parking_lot_defector,
			@RequestParam(value="entrance_status_main",defaultValue="") String[] entrance_status_main,
			@RequestParam(value="entrance_status_lift",defaultValue="") String[] entrance_status_lift,
			@RequestParam(value="entrance_status_door",defaultValue="") String[] entrance_status_door,
			@RequestParam(value="entrance_status_wide_of_door",defaultValue="") String[] entrance_status_wide_of_door,
			@RequestParam(value="living_facility_main",defaultValue="") String[] living_facility_main,
			@RequestParam(value="living_facility_space",defaultValue="") String[] living_facility_space,
			@RequestParam(value="elevator_wheel_chair",defaultValue="") String[] living_facility_evator_wheel_chair,
			@RequestParam(value="elevator_which_scouter",defaultValue="") String[] living_facility_elevator_which_scouter,
			@RequestParam(value="button_for_defector_danger",defaultValue="") String[] living_facility_button_for_defector_danger,
			@RequestParam(value="braille_notice_board",defaultValue="") String[] living_facility_braille_notice_board,
			@RequestParam(value="cinema_theatre_where_defactor",defaultValue="") String[] space_cinema_theatre_where_defactor,
			@RequestParam(value="place_defector_in_cinema_theatre",defaultValue="") String[] space_place_defector_in_cinema_theatre,
			@RequestParam(value="interior_space_wheelchair_can_use",defaultValue="") String[] space_interior_space_wheelchair_can_use,
			@RequestParam(value="interior_space_scouter_can_use",defaultValue="") String[] space_interior_space_scouter_can_use,
			@RequestParam(value="interior_space_stair_or_way",defaultValue="") String[] space_interior_space_stair_or_way,
			@RequestParam(value="space_can_use_by_defector_and_people",defaultValue="") String[] space_space_can_use_by_defector_and_people,
			@RequestParam(value="store_service_table_and_rack_form",defaultValue="") String[] space_store_service_table_and_rack_form,
			@RequestParam(value="braille_block_blinder_inside",defaultValue="") String[] space_braille_block_blinder_inside,
			@RequestParam(value="braille_notice_board_blinder",defaultValue="") String[] space_braille_notice_board_blinder,
			@RequestParam(value="space_main",defaultValue="") String[] space_main,
			@RequestParam(value="purpose_note_1",defaultValue="") String[] purpose_note1,
			@RequestParam(value="purpose_note_2",defaultValue="") String[] purpose_note2,
			@RequestParam(value="purpose_note_3",defaultValue="") String[] purpose_note3,
			@RequestParam(value="room_for_defector",defaultValue="") String[] room_for_defector,
			@RequestParam(value="position_of_room",defaultValue="") String[] position_of_room,
			@RequestParam(value="room_defector",defaultValue="") String[] room_defector,
			@RequestParam(value="interior_wheelchair",defaultValue="") String[] interior_wheelchair,
			@RequestParam(value="interior_space_scouter",defaultValue="") String[] interior_space_scouter,
			@RequestParam(value="interior_space_stair",defaultValue="") String[] interior_space_stair,
			@RequestParam(value="hire_manual",defaultValue="") String[] hire_manual,
			@RequestParam(value="area_of_toilette",defaultValue="") String[] area_of_toilette,
			@RequestParam(value="strap_in_toilette",defaultValue="") String[] strap_in_toilette,
			@RequestParam(value="food_court",defaultValue="") String[] food_court,
			@RequestParam(value="in_interior_space",defaultValue="") String[] in_interior_space,
			@RequestParam(value="braille_notice",defaultValue="") String[] braille_notice,
			@RequestParam(value="toilette_main",defaultValue="") String[] toilette_main,
			@RequestParam(value="toilette_gender",defaultValue="") String[] toilette_gender,
			@RequestParam(value="toilette_entrance_door",defaultValue="") String[] toilette_entrance_door,
			@RequestParam(value="normal_toilette",defaultValue="") String[] normal_toilette,
			@RequestParam(value="number_of_building_placed",defaultValue="") String[] number_of_building_placed,
			@RequestParam(value="position_of_toilette",defaultValue="") String[] position_of_toilette,
			@RequestParam(value="toilette_braille_notice",defaultValue="") String[] toilette_braille_notice,
			@RequestParam(value="number_of_building_defector",defaultValue="") String[] number_of_building_defector,
			@RequestParam(value="toilette_position",defaultValue="") String[] toilette_position,
			@RequestParam(value="gender_neutral",defaultValue="") String[] gender_neutral,
			@RequestParam(value="door_status",defaultValue="") String[] door_status,
			@RequestParam(value="space_inside",defaultValue="") String[] space_inside,
			@RequestParam(value="handle_next_urinal",defaultValue="") String[] handle_next_urinal,
			@RequestParam(value="handle_next_closet",defaultValue="") String[] handle_next_closet,
			@RequestParam(value="cleaning",defaultValue="") String[] cleaning,
			@RequestParam(value="main_service_1",defaultValue="") String[] main_service_1,
			@RequestParam(value="main_service_2",defaultValue="") String[] main_service_2,
			@RequestParam(value="main_service_3",defaultValue="") String[] main_service_3,
			@RequestParam(value="main_service_4",defaultValue="") String[] main_service_4,
			@RequestParam(value="staff_to_help_main",defaultValue="") String[] staff_to_help_main,
			@RequestParam(value="help_to_get",defaultValue="") String[] help_to_get,
			@RequestParam(value="just_help",defaultValue="") String[] just_help,
			@RequestParam(value="accessibility",defaultValue="") String[] accessibility,
			@RequestParam(value="name_of_relevant",defaultValue="") String[] name_of_relevant,
			@RequestParam(value="image_extend_attach") MultipartFile[] image_extend_attach,
			@RequestParam(value="field",defaultValue="") String[] field,
			@RequestParam(value="accessibilityList",defaultValue="") String[] accessibilityList,
			@RequestParam(value="facilityList_other",defaultValue="") String[] facilityList_other,
			@RequestParam(value="longitude",defaultValue="") String longitude,
			@RequestParam(value="latitude",defaultValue="") String latitude,
			HttpSession session, Model model) {
		
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		
		try {
			UserItem user = Login.getUserLogined(session);
			List<String> imageBaseAttachFile = new ArrayList<>();
			List<FacilityDataItem> listphoto = new ArrayList<>();
			
			try {
				for(int i=0;i<5;i++){
					try {
						if(image_base_attach[i].getSize()>0){
							String path = FileUtils.saveFileOrigin(image_base_attach[i], servletContext);
							imageBaseAttachFile.add(path);
						}else{
							imageBaseAttachFile.add("");
						}
					} catch (Exception e) {
						System.out.println(e.toString());
					}
				}

				int iNameOfRelevant = 0;
				int index = 0;
				FacilityDataItem facilityItem = null;
				
				for(MultipartFile file:image_extend_attach){
					if((index % 5) == 0){
						if(index != 0){
							listphoto.add(facilityItem);
						}
						facilityItem = new FacilityDataItem();
						if(name_of_relevant[iNameOfRelevant]==null){
							facilityItem.setNameOfRelevant("");
						}else
						{
							facilityItem.setNameOfRelevant(name_of_relevant[iNameOfRelevant]);
						}
						iNameOfRelevant +=1;
					}
					
					try {
						if(file.getSize()>0){
							String path = FileUtils.saveFileOrigin(file, servletContext);
							facilityItem.addPhoto(path);
						}else{
							facilityItem.addPhoto("");
						}
					} catch (Exception e) {
						System.out.println(e.toString());
					}
					
					index += 1;
				}

			} catch (Exception e) {
				System.out.println(e.toString());
			}
			for (int j = 0; j < listphoto.size(); j++) {
				if (listphoto.get(j).getNameOfRelevant().trim()=="" || listphoto.get(j).getNameOfRelevant()==null) {
					listphoto.remove(j);
					j--;
				}
			}
			Store store = new Store();
			store.setCatid(Utils.parseInt(cate));
			store.setId(0);
			store.setName(name);
			store.setTag(tag);
			//store.setReported(0);
			store.setServiceHours(serviceHours);
			store.setHoliday(holiday);
			store.setBuildingForm(Utils.ConvertStringListToJson("building_form", buildingForm));
			store.setFloor(floor);
			store.setFacilityList(Utils.ConvertDoubleStringListToJson("facility_list", facilityList, "facility_list_other", facilityList_other));
			store.setRepresentative(representative);
			store.setPhone(phone);
			String listAdress[]={address1,address2};
			
			try {
				store.setAddress(Utils.ConvertStringListToAddressStore(listAdress));
			} catch (Exception e) {
			}
			try {
				if(Utils.convertToDate(monitoring_date, "yyyyMMdd") != null){
					store.setMonitoringDate(Utils.convertToDate(monitoring_date, "yyyyMMdd"));
				}else{
					store.setMonitoringDate(new Date());
				}
			} catch (Exception e) {
				store.setMonitoringDate(new Date());
			}
			
			
			store.setMonitoringMan(Utils.ConvertStringListToJson("monitoring_man", monitoring_man));
			store.setMonitoringManPhone(Utils.ConvertStringListToJson("monitoring_man_phone", monitoring_man_phone));
			//store.setFieldList(Utils.ConvertStringListToJson("field_list", field));
			store.setFieldList(Utils.ConvertStringListToJsonObjectContain_ID_Name(field,"field_list"));
			if(image_base_attach.length>0){
				store.setImageBaseAttach(Utils.ConvertListToJson("image_base_attach", imageBaseAttachFile));
			}
			store.setGrade("{\"grade\":\"0\",\"total_rate\":\"0\"}");
			store.setImageExtendAttach(Utils.ConvertListToJson("image_extend_attach", listphoto));
			store.setStoreName(store_name);
			store.setStoreExit(store_exit);
			store.setStoreElevatorPositon(store_elevator_positon);
			
			DistanceItem distanceItem = new DistanceItem();
			distanceItem.parserArray(distance);
			store.setDistance(distanceItem.toJSONString());
			
			BuildingStructureItem buildingStructure = new BuildingStructureItem();
			buildingStructure.parserArray(building_structure);
			store.setBuildingStructure(buildingStructure.toJSONString());
			
			
			List<String[]> purposeNoteVal = new ArrayList<>();
			purposeNoteVal.add(purpose_note1);
			purposeNoteVal.add(purpose_note2);
			purposeNoteVal.add(purpose_note3);
			
			
			PurposeNoteItem purposeNote = new PurposeNoteItem();
			purposeNote.parserArray(purposeNoteVal);
			store.setPurposeNote(purposeNote.toJSONString());
			
			 
			List<String[]> parkingAreaVal = new ArrayList<>();
			parkingAreaVal.add(parking_main);
			parkingAreaVal.add(parking_lot_area);
			parkingAreaVal.add(parking_lot_defector);
			parkingAreaVal.add(parking_distance);
			
			ParkingAreaItem parkingArea = new ParkingAreaItem();
			parkingArea.parserArray(parkingAreaVal);
			store.setParkingArea(parkingArea.toJSONString());
			
			 
			List<String[]> entranceStatusVal = new ArrayList<>();
			entranceStatusVal.add(entrance_status_main);
			entranceStatusVal.add(entrance_status_lift);
			entranceStatusVal.add(entrance_status_door);
			entranceStatusVal.add(entrance_status_wide_of_door);
			
			EntranceStatusItem entranceStatusItem = new EntranceStatusItem();
			entranceStatusItem.parserArray(entranceStatusVal);
			store.setEntranceStatus(entranceStatusItem.toJSONString());
			 
			
			
			List<String[]> livingFacilityVal = new ArrayList<>();
			livingFacilityVal.add(living_facility_main);
			livingFacilityVal.add(living_facility_space);
			livingFacilityVal.add(living_facility_evator_wheel_chair);
			livingFacilityVal.add(living_facility_elevator_which_scouter);
			livingFacilityVal.add(living_facility_button_for_defector_danger);
			livingFacilityVal.add(living_facility_braille_notice_board);
			
			LivingFacilityItem livingFacilityItem = new LivingFacilityItem();
			livingFacilityItem.parserArray(livingFacilityVal);
			store.setLivingFacility(livingFacilityItem.toJSONString());
			
			
			List<String[]> listSpaceVal = new ArrayList<>();
			listSpaceVal.add(space_main);
			listSpaceVal.add(space_interior_space_wheelchair_can_use);
			listSpaceVal.add(space_interior_space_scouter_can_use);
			listSpaceVal.add(space_interior_space_stair_or_way);
			listSpaceVal.add(space_space_can_use_by_defector_and_people);
			listSpaceVal.add(space_store_service_table_and_rack_form);
			listSpaceVal.add(space_braille_block_blinder_inside);
			listSpaceVal.add(space_braille_notice_board_blinder);
			listSpaceVal.add(space_cinema_theatre_where_defactor);
			listSpaceVal.add(space_place_defector_in_cinema_theatre);
			
			SpaceItem spaceItem = new SpaceItem();
			spaceItem.parserArray(listSpaceVal);
			store.setSpace(spaceItem.toJSONString());
			
			List<String[]> roomOfRefectorVal = new ArrayList<>();
			roomOfRefectorVal.add(room_for_defector);
			roomOfRefectorVal.add(position_of_room);
			roomOfRefectorVal.add(room_defector);
			roomOfRefectorVal.add(interior_wheelchair);
			roomOfRefectorVal.add(interior_space_scouter);
			roomOfRefectorVal.add(interior_space_stair);
			roomOfRefectorVal.add(hire_manual);
			roomOfRefectorVal.add(area_of_toilette);
			roomOfRefectorVal.add(strap_in_toilette);
			roomOfRefectorVal.add(food_court);
			roomOfRefectorVal.add(in_interior_space);
			roomOfRefectorVal.add(braille_notice);
			
			RoomOfRefectorItem roomOfRefectorItem = new RoomOfRefectorItem();
			roomOfRefectorItem.parserArray(roomOfRefectorVal);
			store.setRoomOfRefector(roomOfRefectorItem.toJSONString());
			
			List<String[]> toiletteForDefectorVal = new ArrayList<>();
			toiletteForDefectorVal.add(toilette_main);
			toiletteForDefectorVal.add(toilette_gender);
			toiletteForDefectorVal.add(toilette_entrance_door);
			toiletteForDefectorVal.add(normal_toilette);
			toiletteForDefectorVal.add(number_of_building_placed);
			toiletteForDefectorVal.add(position_of_toilette);
			toiletteForDefectorVal.add(toilette_braille_notice);
			toiletteForDefectorVal.add(number_of_building_defector);
			toiletteForDefectorVal.add(toilette_position);
			toiletteForDefectorVal.add(gender_neutral);
			toiletteForDefectorVal.add(door_status);
			toiletteForDefectorVal.add(space_inside);
			toiletteForDefectorVal.add(handle_next_urinal);
			toiletteForDefectorVal.add(handle_next_closet);
			toiletteForDefectorVal.add(cleaning);
			
			ToiletteForDefector toiletteForDefector = new ToiletteForDefector();
			toiletteForDefector.parserArray(toiletteForDefectorVal);
			store.setToiletteForDefector(toiletteForDefector.toJSONString());
			
			List<String[]> mainGoodServiceVal = new ArrayList<>();
			mainGoodServiceVal.add(main_service_1);
			mainGoodServiceVal.add(main_service_2);
			mainGoodServiceVal.add(main_service_3);
			mainGoodServiceVal.add(main_service_4);

			MainGoodService mainGoodService = new MainGoodService();
			mainGoodService.parserArray(mainGoodServiceVal);
			store.setMainGoodService(mainGoodService.toJSONString());
			 
			
			List<String[]> staffToHelpVal = new ArrayList<>();
			staffToHelpVal.add(staff_to_help_main);
			staffToHelpVal.add(help_to_get);
			staffToHelpVal.add(just_help);
			
			StaffToHelp staffToHelp = new StaffToHelp();
			staffToHelp.parserArray(staffToHelpVal);
			store.setStaffHelpDefector(staffToHelp.toJSONString());
			
			
			store.setAccessibilityList(Utils.ConvertStringListToJson("accessibility_list", accessibility));
			store.setIsDelete(0);
			store.setLongitude(longitude);
			store.setLatitude(latitude);
			store.setCreateDate(new Date());
			store.setUpdateDate(new Date());
			store.setUserId(user.getId());
			store.setCatId(Utils.parseInt(cate));
			store.setDescription(description);
			
			Store createNew = storeService.create(store);
			if(createNew != null){
				return "redirect:/store/list";
			}
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		
		List<Facility> listFacility = facilityService.findAll();
		List<Accessibility> listAccessibility = accessibilityService.findAll();
		List<CategoryEntity> listCategory = categoryService.findByDistrict();
		List<FieldEntity> listField = fieldService.listField();
		
		model.addAttribute("listField", listField);
		model.addAttribute("listCategory", listCategory);
		model.addAttribute("listAccessibility", listAccessibility);
		model.addAttribute("listFacility", listFacility);
		model.addAttribute("activePage", nav);
		return JSP_CREATE;
	}
	
	@RequestMapping(value="/detail/{id}",method=RequestMethod.GET)
	public String getDetail(Model model, 
			@RequestParam(value="page",defaultValue="1") Integer page,
			HttpSession session,
			@PathVariable("id") Integer id) {
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		Store store = storeService.findById(id);
		//List<CategoryEntity> listBuildingForm=categoryService.findByGroupId(1);
		List<Facility> listFacility=facilityService.findAll();
		List<CategoryEntity> listCategory = categoryService.findByGroupId(0);
		List<Accessibility> listAccessibility=accessibilityService.findAll();
		List<String> listMan= Utils.ConvertJsonTo_ListString(store.getMonitoringMan(), "monitoring_man");
		List<String> listManPhone= Utils.ConvertJsonTo_ListString(store.getMonitoringManPhone(), "monitoring_man_phone");
		List<String> listImageBase= Utils.ConvertJsonTo_ListString(store.getImageBaseAttach(), "image_base_attach");
		//Du lieu form
		RoomOfRefectorItem roomOfRefectorItem = new RoomOfRefectorItem();
		DistanceItem distanceItem =new DistanceItem();
		BuildingStructureItem buildingStructureItem = new BuildingStructureItem();
		EntranceStatusItem entranceStatusItem = new EntranceStatusItem();
		LivingFacilityItem living = new LivingFacilityItem();
		MainGoodService goodService = new MainGoodService();
		ParkingAreaItem parkingAreaItem = new ParkingAreaItem();
		PurposeNoteItem purposeNoteItem = new PurposeNoteItem();
		SpaceItem spaceItem = new SpaceItem();
		StaffToHelp staffToHelp = new StaffToHelp();	
		ToiletteForDefector toilet = new ToiletteForDefector();
		roomOfRefectorItem.parserJson(store.getRoomOfRefector());
		distanceItem.parserJson(store.getDistance());
		buildingStructureItem.parserJson(store.getBuildingStructure());
		entranceStatusItem.parserJson(store.getEntranceStatus());
		living.parserJson(store.getLivingFacility());
		goodService.parserJson(store.getMainGoodService());
		parkingAreaItem.parserJson(store.getParkingArea());
		purposeNoteItem.parserJson(store.getPurposeNote());
		spaceItem.parserJson(store.getSpace());
		staffToHelp.parserJson(store.getStaffHelpDefector());
		toilet.parserJson(store.getToiletteForDefector());
		List<FieldEntity> listField = fieldService.listField();
		List<ImageExtend> imageExtend=new ArrayList<>();
		imageExtend=Utils.ConvertJsonTo_ListExtendImage(store.getImageExtendAttach());
		List<String> listFacilityStore= Utils.ConvertJsonTo_ListString(store.getFacilityList(), "facility_list");
		List<String> facilityList_other= Utils.ConvertJsonTo_ListString(store.getFacilityList(), "facility_list_other");
		Page<CommentEntity>  list_Comment=null;
		 list_Comment=commentService.findAllByStore(id, page, 5);
		
		String str="";
		if(listFacilityStore!=null){
		for (int i = 0; i < listFacilityStore.size(); i++) {
			if(i==0){
				str="~"+listFacilityStore.get(i)+"~";
			}else{
				str+=",~"+listFacilityStore.get(i)+"~";
			}
		}
		}
		if(facilityList_other!=null && facilityList_other.size()>0){
			model.addAttribute("facilityList_other",facilityList_other.get(0) );
		}else{
			model.addAttribute("facilityList_other","");
		}
		model.addAttribute("pagination_navigator", "/store/detail/"+id);
		new Pager<CommentEntity>(list_Comment).setSetting(model, "");	
		if(store.getCatId()!=0 || store.getCatId()!=0){
			try {
				Category category= categoryService.findById(store.getCatId());
				List<CategoryEntity> listDistrict= categoryService.findByGroupId(category.getParentId());
				model.addAttribute("city_id", category.getParentId());
				model.addAttribute("listDistrict", listDistrict);
			} catch (Exception e) {
				
			}
		}
		
		model.addAttribute("list_Comment",list_Comment );
		model.addAttribute("listFacilityStore",str );
		model.addAttribute("imageExtend",imageExtend );
		model.addAttribute("address1", Utils.ConvertJsonTo_String(store.getAddress(), "address", "address1"));
		model.addAttribute("address2", Utils.ConvertJsonTo_String(store.getAddress(), "address", "address2"));
		model.addAttribute("listField", listField);
		model.addAttribute("room", roomOfRefectorItem);
		model.addAttribute("distance", distanceItem);
		model.addAttribute("building", buildingStructureItem);
		model.addAttribute("entrance", entranceStatusItem);
		model.addAttribute("living", living);
		model.addAttribute("goodService", goodService);
		model.addAttribute("parkingArea", parkingAreaItem);
		model.addAttribute("purposeNote", purposeNoteItem);
		model.addAttribute("space", spaceItem);
		model.addAttribute("staffToHelp", staffToHelp);
		model.addAttribute("toilet", toilet);
		model.addAttribute("room", roomOfRefectorItem);
		model.addAttribute("listImageBase", listImageBase);
		model.addAttribute("listMan", listMan);
		model.addAttribute("listManPhone", listManPhone);
		model.addAttribute("s", store);
	//	model.addAttribute("listBuildingForm", listBuildingForm);
		model.addAttribute("listFacility", listFacility);
		model.addAttribute("listCategory", listCategory);
		model.addAttribute("listAccessibility", listAccessibility);
		return JSP_DETAIL;
	}
	
	
	
	@RequestMapping(value="/detail/{id}",method=RequestMethod.POST)
	public String postDetail(Model model, 
			@RequestParam(value="name",defaultValue="") String name,
			@RequestParam(value="tag",defaultValue="") String tag,
			@RequestParam(value="serviceHours",defaultValue="") String serviceHours,
			@RequestParam(value="holiday",defaultValue="") String holiday,
			@RequestParam(value="buildingForm",defaultValue="") String[] buildingForm,
			@RequestParam(value="floor",defaultValue="") String floor,
			@RequestParam(value="facilityList",defaultValue="") String[] facilityList,
			@RequestParam(value="representative",defaultValue="") String representative,
			@RequestParam(value="phone",defaultValue="") String phone,
			@RequestParam(value="monitoring_date",defaultValue="") String monitoring_date,
			@RequestParam(value="category",defaultValue="") String cate,
			@RequestParam(value="address1",defaultValue=" ") String address1,
			@RequestParam(value="address2",defaultValue=" ") String address2,
			@RequestParam(value="fieldList",defaultValue="") String[] fieldList,
			@RequestParam(value="accessibilityList",defaultValue="") String[] accessibilityList,
			@RequestParam(value="accessibility",defaultValue="") String[] accessibility,
			@RequestParam(value="field",defaultValue="") String[] field,
			@RequestParam(value="longitude",defaultValue="") String longitude,
			@RequestParam(value="latitude",defaultValue="") String latitude,
			@RequestParam(value="mornitoringManPhone",defaultValue="") String[] mornitoringManPhone,
			@RequestParam(value="monitoringMan",defaultValue="") String[] monitoringMan,
			@RequestParam(value="imageBaseAttach") MultipartFile[] imageBaseAttach,
			@RequestParam(value="store_name",defaultValue="") String store_name,
			@RequestParam(value="store_exit",defaultValue="") String store_exit,
			@RequestParam(value="store_elevator_positon",defaultValue="") String store_elevator_positon,
			@RequestParam(value="distance",defaultValue="") String[] distance,
			@RequestParam(value="building_structure",defaultValue="") String[] building_structure,
			@RequestParam(value="parking_main",defaultValue="") String[] parking_main,
			@RequestParam(value="parking_distance",defaultValue="") String[] parking_distance,
			@RequestParam(value="parking_lot_area",defaultValue="") String[] parking_lot_area,
			@RequestParam(value="parking_lot_defector",defaultValue="") String[] parking_lot_defector,
			@RequestParam(value="entrance_status_main",defaultValue="") String[] entrance_status_main,
			@RequestParam(value="entrance_status_lift",defaultValue="") String[] entrance_status_lift,
			@RequestParam(value="entrance_status_door",defaultValue="") String[] entrance_status_door,
			@RequestParam(value="entrance_status_wide_of_door",defaultValue="") String[] entrance_status_wide_of_door,
			@RequestParam(value="living_facility_main",defaultValue="") String[] living_facility_main,
			@RequestParam(value="living_facility_space",defaultValue="") String[] living_facility_space,
			@RequestParam(value="elevator_wheel_chair",defaultValue="") String[] living_facility_evator_wheel_chair,
			@RequestParam(value="elevator_which_scouter",defaultValue="") String[] living_facility_elevator_which_scouter,
			@RequestParam(value="button_for_defector_danger",defaultValue="") String[] living_facility_button_for_defector_danger,
			@RequestParam(value="braille_notice_board",defaultValue="") String[] living_facility_braille_notice_board,
			@RequestParam(value="cinema_theatre_where_defactor",defaultValue="") String[] space_cinema_theatre_where_defactor,
			@RequestParam(value="place_defector_in_cinema_theatre",defaultValue="") String[] space_place_defector_in_cinema_theatre,
			@RequestParam(value="interior_space_wheelchair_can_use",defaultValue="") String[] space_interior_space_wheelchair_can_use,
			@RequestParam(value="interior_space_scouter_can_use",defaultValue="") String[] space_interior_space_scouter_can_use,
			@RequestParam(value="interior_space_stair_or_way",defaultValue="") String[] space_interior_space_stair_or_way,
			@RequestParam(value="space_can_use_by_defector_and_people",defaultValue="") String[] space_space_can_use_by_defector_and_people,
			@RequestParam(value="store_service_table_and_rack_form",defaultValue="") String[] space_store_service_table_and_rack_form,
			@RequestParam(value="braille_block_blinder_inside",defaultValue="") String[] space_braille_block_blinder_inside,
			@RequestParam(value="braille_notice_board_blinder",defaultValue="") String[] space_braille_notice_board_blinder,
			@RequestParam(value="space_main",defaultValue="") String[] space_main,
			@RequestParam(value="purpose_note_1",defaultValue="") String[] purpose_note1,
			@RequestParam(value="purpose_note_2",defaultValue="") String[] purpose_note2,
			@RequestParam(value="purpose_note_3",defaultValue="") String[] purpose_note3,
			@RequestParam(value="room_main",defaultValue="") String[] room_main,
			@RequestParam(value="room_for_defector",defaultValue="") String[] room_for_defector,
			@RequestParam(value="position_of_room",defaultValue="") String[] position_of_room,
			@RequestParam(value="room_defector",defaultValue="") String[] room_defector,
			@RequestParam(value="interior_wheelchair",defaultValue="") String[] interior_wheelchair,
			@RequestParam(value="interior_space_scouter",defaultValue="") String[] interior_space_scouter,
			@RequestParam(value="interior_space_stair",defaultValue="") String[] interior_space_stair,
			@RequestParam(value="hire_manual",defaultValue="") String[] hire_manual,
			@RequestParam(value="area_of_toilette",defaultValue="") String[] area_of_toilette,
			@RequestParam(value="strap_in_toilette",defaultValue="") String[] strap_in_toilette,
			@RequestParam(value="food_court",defaultValue="") String[] food_court,
			@RequestParam(value="in_interior_space",defaultValue="") String[] in_interior_space,
			@RequestParam(value="braille_notice",defaultValue="") String[] braille_notice,
			@RequestParam(value="toilette_main",defaultValue="") String[] toilette_main,
			@RequestParam(value="toilette_gender",defaultValue="") String[] toilette_gender,
			@RequestParam(value="toilette_entrance_door",defaultValue="") String[] toilette_entrance_door,
			@RequestParam(value="normal_toilette",defaultValue="") String[] normal_toilette,
			@RequestParam(value="number_of_building_placed",defaultValue="") String[] number_of_building_placed,
			@RequestParam(value="position_of_toilette",defaultValue="") String[] position_of_toilette,
			@RequestParam(value="toilette_braille_notice",defaultValue="") String[] toilette_braille_notice,
			@RequestParam(value="number_of_building_defector",defaultValue="") String[] number_of_building_defector,
			@RequestParam(value="toilette_position",defaultValue="") String[] toilette_position,
			@RequestParam(value="gender_neutral",defaultValue="") String[] gender_neutral,
			@RequestParam(value="door_status",defaultValue="") String[] door_status,
			@RequestParam(value="space_inside",defaultValue="") String[] space_inside,
			@RequestParam(value="handle_next_urinal",defaultValue="") String[] handle_next_urinal,
			@RequestParam(value="handle_next_closet",defaultValue="") String[] handle_next_closet,
			@RequestParam(value="cleaning",defaultValue="") String[] cleaning,
			@RequestParam(value="main_service_1",defaultValue="") String[] main_service_1,
			@RequestParam(value="main_service_2",defaultValue="") String[] main_service_2,
			@RequestParam(value="main_service_3",defaultValue="") String[] main_service_3,
			@RequestParam(value="main_service_4",defaultValue="") String[] main_service_4,
			@RequestParam(value="staff_to_help_main",defaultValue="") String[] staff_to_help_main,
			@RequestParam(value="help_to_get",defaultValue="") String[] help_to_get,
			@RequestParam(value="just_help",defaultValue="") String[] just_help,
			@RequestParam(value="name_of_relevant",defaultValue="") String[] name_of_relevant,
			@RequestParam(value="imageBaseAttachUrl",defaultValue="") String[] imageBaseAttachUrl,
			@RequestParam(value="facilityList_other",defaultValue="") String[] facilityList_other,
			@RequestParam(value="image_extend_attach") MultipartFile[] image_extend_attach,
			@RequestParam(value="edit",defaultValue="0") Integer edit,
			@RequestParam(value="img_url_extend",defaultValue="") String[] img_url_extend,
			@RequestParam(value="description",defaultValue="") String description,
			@RequestParam(value="delete_comment",defaultValue="0") Integer delete_comment,
			HttpServletRequest request,HttpServletResponse response,HttpSession session,
			@PathVariable("id") Integer id) {
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		
		Store store = storeService.findById(id);
		if(delete_comment>0){
			Comment comment =	commentService.findById(delete_comment);
			comment.setIsDelete(1);
			commentService.update(comment);
			return "redirect:/store/detail/"+id;
		}
		
		if(edit>0){
			try {
				UserItem user = Login.getUserLogined(session);
				List<String> imageBaseAttachFile = new ArrayList<>();
				List<FacilityDataItem> listphoto = new ArrayList<>();
				try {
					for(int i=0;i<5;i++){
						try {
							if(imageBaseAttach[i].getSize()>0){
								String path = FileUtils.saveFileOrigin(imageBaseAttach[i], servletContext);
								imageBaseAttachFile.add(path);
							}else{
								imageBaseAttachFile.add(imageBaseAttachUrl[i]);
							}
						} catch (Exception e) {
							System.out.println(e.toString());
						}
					}
					int iNameOfRelevant = 0;
					int index = 0;
					int count = 0;
					FacilityDataItem facilityItem = null;
					List<ImageExtend> imageExtend=new ArrayList<>();
					imageExtend=Utils.ConvertJsonTo_ListExtendImage(store.getImageExtendAttach());
					for(MultipartFile file:image_extend_attach){
						if((index % 5) == 0){
							if(index != 0){
								listphoto.add(facilityItem);
							}
							facilityItem = new FacilityDataItem();
							if(name_of_relevant[iNameOfRelevant]==null){
								facilityItem.setNameOfRelevant("");
							}else{
								facilityItem.setNameOfRelevant(name_of_relevant[iNameOfRelevant]);
							}
							iNameOfRelevant +=1;
						}
						
						try {
							if(count==5){
								 count = 0;
							}
							if(file.getSize()>0){
								String path = FileUtils.saveFileOrigin(file, servletContext);
								facilityItem.addPhoto(path);
							}else{
								
								String path = img_url_extend[index];
								facilityItem.addPhoto(path);
							}
							
						} catch (Exception e) {
							System.out.println(e.toString());
						}
						index += 1;
						count += 1;
					}

				} catch (Exception e) {
					System.out.println(e.toString());
				}
				for (int j = 0; j < listphoto.size(); j++) {
					if (listphoto.get(j).getNameOfRelevant().trim()=="" || listphoto.get(j).getNameOfRelevant()==null) {
						listphoto.remove(j);
						j--;
					}
				}
				
				
				store.setName(name);	
				store.setTag(tag);
				store.setServiceHours(serviceHours);
				store.setHoliday(holiday);
				store.setBuildingForm(Utils.ConvertStringListToJson("building_form", buildingForm));
				store.setFloor(floor);
				store.setFacilityList(Utils.ConvertDoubleStringListToJson("facility_list", facilityList, "facility_list_other", facilityList_other));
				
				store.setRepresentative(representative);
				store.setPhone(phone);
				store.setAccessibilityList(Utils.ConvertStringListToJson("accessibility_list", accessibilityList));
				
				store.setFieldList(Utils.ConvertStringListToJsonObjectContain_ID_Name(fieldList,"field_list"));
				String ok2= Utils.ConvertStringListToJsonObjectContain_ID_Name(fieldList,"field_list");
				store.setMonitoringMan(Utils.ConvertStringListToJson("monitoring_man", monitoringMan));
				store.setMonitoringManPhone(Utils.ConvertStringListToJson("monitoring_man_phone", mornitoringManPhone));
				if(imageBaseAttachFile.size()>0){
					store.getImageBaseAttach();
					store.setImageBaseAttach(Utils.ConvertListToJson("image_base_attach",imageBaseAttachFile));
				}
				store.setImageExtendAttach(Utils.ConvertListToJson("image_extend_attach", listphoto));
				
				
				store.setStoreName(store_name);
				store.setStoreExit(store_exit);
				store.setStoreElevatorPositon(store_elevator_positon);
				
				DistanceItem distanceItem = new DistanceItem();
				distanceItem.parserArray(distance);
				store.setDistance(distanceItem.toJSONString());
				
				BuildingStructureItem buildingStructure = new BuildingStructureItem();
				buildingStructure.parserArray(building_structure);
				store.setBuildingStructure(buildingStructure.toJSONString());
				
				
				List<String[]> purposeNoteVal = new ArrayList<>();
				purposeNoteVal.add(purpose_note1);
				purposeNoteVal.add(purpose_note2);
				purposeNoteVal.add(purpose_note3);
				
				PurposeNoteItem purposeNote = new PurposeNoteItem();
				purposeNote.parserArray(purposeNoteVal);
				store.setPurposeNote(purposeNote.toJSONString());
				
				 
				List<String[]> parkingAreaVal = new ArrayList<>();
				parkingAreaVal.add(parking_main);
				parkingAreaVal.add(parking_lot_area);
				parkingAreaVal.add(parking_lot_defector);
				parkingAreaVal.add(parking_distance);
				
				ParkingAreaItem parkingArea = new ParkingAreaItem();
				parkingArea.parserArray(parkingAreaVal);
				store.setParkingArea(parkingArea.toJSONString());
				
				 
				List<String[]> entranceStatusVal = new ArrayList<>();
				entranceStatusVal.add(entrance_status_main);
				entranceStatusVal.add(entrance_status_lift);
				entranceStatusVal.add(entrance_status_door);
				entranceStatusVal.add(entrance_status_wide_of_door);
				
				EntranceStatusItem entranceStatusItem = new EntranceStatusItem();
				entranceStatusItem.parserArray(entranceStatusVal);
				store.setEntranceStatus(entranceStatusItem.toJSONString());
				 
				
				
				List<String[]> livingFacilityVal = new ArrayList<>();
				livingFacilityVal.add(living_facility_main);
				livingFacilityVal.add(living_facility_space);
				livingFacilityVal.add(living_facility_evator_wheel_chair);
				livingFacilityVal.add(living_facility_elevator_which_scouter);
				livingFacilityVal.add(living_facility_button_for_defector_danger);
				livingFacilityVal.add(living_facility_braille_notice_board);
				
				LivingFacilityItem livingFacilityItem = new LivingFacilityItem();
				livingFacilityItem.parserArray(livingFacilityVal);
				store.setLivingFacility(livingFacilityItem.toJSONString());
				
				
				List<String[]> listSpaceVal = new ArrayList<>();
				listSpaceVal.add(space_main);
				listSpaceVal.add(space_interior_space_wheelchair_can_use);
				listSpaceVal.add(space_interior_space_scouter_can_use);
				listSpaceVal.add(space_interior_space_stair_or_way);
				listSpaceVal.add(space_space_can_use_by_defector_and_people);
				listSpaceVal.add(space_store_service_table_and_rack_form);
				listSpaceVal.add(space_braille_block_blinder_inside);
				listSpaceVal.add(space_braille_notice_board_blinder);
				listSpaceVal.add(space_cinema_theatre_where_defactor);
				listSpaceVal.add(space_place_defector_in_cinema_theatre);
				
				SpaceItem spaceItem = new SpaceItem();
				spaceItem.parserArray(listSpaceVal);
				store.setSpace(spaceItem.toJSONString());
				
				List<String[]> roomOfRefectorVal = new ArrayList<>();
				roomOfRefectorVal.add(room_main);
				roomOfRefectorVal.add(position_of_room);
				roomOfRefectorVal.add(room_defector);
				roomOfRefectorVal.add(interior_wheelchair);
				roomOfRefectorVal.add(interior_space_scouter);
				roomOfRefectorVal.add(interior_space_stair);
				roomOfRefectorVal.add(hire_manual);
				roomOfRefectorVal.add(area_of_toilette);
				roomOfRefectorVal.add(strap_in_toilette);
				roomOfRefectorVal.add(food_court);
				roomOfRefectorVal.add(in_interior_space);
				roomOfRefectorVal.add(braille_notice);
				
				RoomOfRefectorItem roomOfRefectorItem = new RoomOfRefectorItem();
				roomOfRefectorItem.parserArray(roomOfRefectorVal);
				store.setRoomOfRefector(roomOfRefectorItem.toJSONString());
				
				List<String[]> toiletteForDefectorVal = new ArrayList<>();
				toiletteForDefectorVal.add(toilette_main);
				toiletteForDefectorVal.add(toilette_gender);
				toiletteForDefectorVal.add(toilette_entrance_door);
				toiletteForDefectorVal.add(normal_toilette);
				toiletteForDefectorVal.add(number_of_building_placed);
				toiletteForDefectorVal.add(position_of_toilette);
				toiletteForDefectorVal.add(toilette_braille_notice);
				toiletteForDefectorVal.add(number_of_building_defector);
				toiletteForDefectorVal.add(toilette_position);
				toiletteForDefectorVal.add(gender_neutral);
				toiletteForDefectorVal.add(door_status);
				toiletteForDefectorVal.add(space_inside);
				toiletteForDefectorVal.add(handle_next_urinal);
				toiletteForDefectorVal.add(handle_next_closet);
				toiletteForDefectorVal.add(cleaning);
				
				ToiletteForDefector toiletteForDefector = new ToiletteForDefector();
				toiletteForDefector.parserArray(toiletteForDefectorVal);
				store.setToiletteForDefector(toiletteForDefector.toJSONString());
				
				List<String[]> mainGoodServiceVal = new ArrayList<>();
				mainGoodServiceVal.add(main_service_1);
				mainGoodServiceVal.add(main_service_2);
				mainGoodServiceVal.add(main_service_3);
				mainGoodServiceVal.add(main_service_4);

				MainGoodService mainGoodService = new MainGoodService();
				mainGoodService.parserArray(mainGoodServiceVal);
				store.setMainGoodService(mainGoodService.toJSONString());
				 
				
				List<String[]> staffToHelpVal = new ArrayList<>();
				staffToHelpVal.add(staff_to_help_main);
				staffToHelpVal.add(help_to_get);
				staffToHelpVal.add(just_help);
				
				StaffToHelp staffToHelp = new StaffToHelp();
				staffToHelp.parserArray(staffToHelpVal);
				store.setStaffHelpDefector(staffToHelp.toJSONString());
				store.setLongitude(longitude);
				store.setLatitude(latitude);
				store.setImageExtendAttach(Utils.ConvertListToJson("image_extend_attach", listphoto));
				System.out.println(listphoto);
			
				try {
					if(Utils.convertToDate(monitoring_date, "yyyyMMdd") != null){
						store.setMonitoringDate(Utils.convertToDate(monitoring_date, "yyyyMMdd"));
					}else{
						store.setMonitoringDate(new Date());
					}
					
				} catch (Exception e) {
					store.setMonitoringDate(new Date());
				}
				
				store.setIsDelete(0);
				store.setLongitude(longitude);
				store.setLatitude(latitude);
				//store.setReported(0);
				store.setUpdateDate(new Date());
				store.setCatId(Utils.parseInt(cate));
				store.setUserId(user.getId());
				store.setCatid(Utils.parseInt(cate));
				store.setUpdateDate(new Date());
				store.setDescription(description);
				String catname="";
				try {
					 catname=categoryService.findById(Utils.parseInt(cate)).getCatName();
				} catch (Exception e) {
					 catname="";
				}
				String listAdress[]={address1,address2};
				try {
					store.setAddress(Utils.ConvertStringListToAddressStore(listAdress));
				} catch (Exception e) {
					
				}
				Store ok = storeService.update(store);
				
				if(ok!=null){
					store=ok;
					return "redirect:/store/detail/"+id;
				}
			} catch (Exception e) {
 				System.out.println(e);
			}
		}
		if(store.getCatId()!=0 || store.getCatId()!=0){
			try {
				Category category= categoryService.findById(store.getCatId());
				List<CategoryEntity> listDistrict= categoryService.findByGroupId(category.getId());
				model.addAttribute("city_id", category.getParentId());
				model.addAttribute("listDistrict", listDistrict);
			} catch (Exception e) {
				
			}
		}
		List<FieldEntity> listField = fieldService.listField();
		List<String> listMan= Utils.ConvertJsonTo_ListString(store.getMonitoringMan(), "monitoring_man");
		List<String> listManPhone= Utils.ConvertJsonTo_ListString(store.getMonitoringManPhone(), "monitoring_man_phone");
		model.addAttribute("listMan", listMan);
		model.addAttribute("listManPhone", listManPhone);
		//List<CategoryEntity> listBuildingForm=categoryService.findByGroupId(1);
		List<Facility> listFacility=facilityService.findAll();
		List<CategoryEntity> listCategory=categoryService.findByDistrict();
		List<Accessibility> listAccessibility=accessibilityService.findAll();
		List<String> listImageBase= Utils.ConvertJsonTo_ListString(store.getImageBaseAttach(), "image_base_attach");
		model.addAttribute("listImageBase", listImageBase);
		model.addAttribute("s", store);
		//model.addAttribute("listBuildingForm", listBuildingForm);
		model.addAttribute("listField", listField);
		model.addAttribute("listFacility", listFacility);
		model.addAttribute("listCategory", listCategory);
		model.addAttribute("activePage", nav);
		model.addAttribute("listAccessibility", listAccessibility);

		return JSP_DETAIL;
	}

}